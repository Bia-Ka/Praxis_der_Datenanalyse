{
    "collab_server" : "",
    "contents" : "```{r include=FALSE, cache=FALSE}\nset.seed(1014)\noptions(digits = 3)\n\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  message = FALSE,\n  warning = FALSE,\n  cache = TRUE,\n  out.width = \"70%\",\n  fig.align = 'center',\n  fig.width = 6,\n  fig.asp = 0.618,  # 1 / phi\n  fig.show = \"hold\"\n)\n\n```\n\n\n\n# Fallstudie zum Datenjudo\n\n\n```{r echo = FALSE, out.width = \"30%\", fig.align = \"center\"}\nknitr::include_graphics(\"images/FOM.jpg\")\n```\n\n```{r echo = FALSE, out.width = \"10%\", fig.align = \"center\"}\nknitr::include_graphics(\"images/licence.png\")\n```\n\n\n```{block2, ziele-nycflights13, type='rmdcaution', echo = TRUE} \nLernziele:\n\n- Grundlegende Funktionen von `dplyr` andwenden können.\n- Das Konzept der Pfeife in einem echten Datensatz anwenden können.\n- Auch mit relativ großen Daten sicher hantieren können.\n\n```\n\n\nSchauen wir uns einige Beispiele der Datenaufbereitung mittels `dplyr` anhand einer Fallstudie an. Wir verwenden hier den Datensatz `flights` aus dem Package `nycflights13`. Der Datensatz ist recht groß (~300.000 Zeilen und 19 Spalten); wenn man ihn als Excel importiert, kann eine alte Möhre von Computer schon in die Knie gehen. Beim Import als CSV habe ich noch nie von Problemen gehört; beim Import via Package ebenfalls nicht. Werfen wir einen ersten Blick in die Daten:\n\nLaden wir zuerst `dplyr` and friends. Das geht mit dem Paket `tidyverse`, welches diese Pakete lädt:\n\n```{r}\nlibrary(tidyverse)  # Datenjudo\nlibrary(nycflights13)  # für die Daten\n```\n\n\nDann laden wir die Daten aus dem Paket `nycflights13` mit `data` und werfen eine Blick hinein (\"to glimpse\") mit `glimpse`; `glimpse` zeigt uns einen Überblick über den Dataframe.\n\n```{r}\ndata(flights)\nglimpse(flights)\n```\n\nDer Befehl `data` lädt Daten aus einem zuvor gestarteten Paket. \n\n## Achtung, Fallstudie\n\nSie sind der/die Assistent_in des Chefs der New Yorker Flughäfen. Ihr Chef kommt gut gelaunt ins Büro und sagt, dass er diesen Schnarchnasen einheizen wolle und sagt, sie sollen ihm mal schnell die Flüge mit der größten Verspätung raussuchen. Nix schickes, aber zacki-zacki...\n\n```{r}\nflights %>% \n  arrange(arr_delay)\n```\n\nHm, übersichtlicher wäre es wahrscheinlich, wenn wir weniger Spalten anschauen müssten. Am besten neben der Verspätung nur die Information, die wir zur Identifizierung der Schuldigen... will sagen der gesuchten Flüge benötigen\n\n```{r}\nflights %>% \n  arrange(arr_delay) %>% \n  select(arr_delay, carrier, month, day, dep_time, tailnum, flight, dest)\n```\n\nDa Zahlen in ihrer natürlichen Form von klein nach groß sortiert sind, sortiert `arrange` in ebendieser Richtung. Wir können das umdrehen mit einem Minuszeichen vor der zu sortierenden Spalte:\n\n```{r}\nflights %>% \n  arrange(-arr_delay) %>% \n  select(arr_delay, carrier, month, day, dep_time, tailnum, flight, dest)\n```\n\n<!-- Eine kleine Zugabe: Mit dem Befehl `knitr::kable` kann man einen Dataframe automatisch in eine (einigermaßen) schöne Tabelle ausgeben lassen. -->\n\nOh halt, wir wollen keine Tabelle mit 300.000 Zeilen (der Chef ist kein Freund von Details). Also begrenzen wir die Ausgabe auf die ersten 10 Plätze.\n\n```{r}\nflights %>% \n  arrange(-arr_delay) %>% \n  select(arr_delay, carrier, month, day, dep_time, tailnum, flight, dest) %>% \n  filter(row_number() < 11) \n```\n\n\"Geht doch\", war die Antwort des Chefs, als sie die Tabelle rübergeben (er mag auch keine Emails). \"Ach ja\", raunt der Chef, als Sie das Zimmer verlassen wollen, \"hatte ich erwähnt, dass ich die gleiche Auswertung für jeden Carrier brauche? Reicht bis in einer halben Stunde\".\n\nWir gruppieren also den Datensatz nach der Fluggesellschaft (`carrier`) und filtern dann  die ersten 3 Zeilen (damit die Tabelle für den Chef nicht zu groß wird). Wie jeder `dplyr`-Befehl wird die vorherige Gruppierung berücksichtigt und daher die Top-3-Zeilen *pro Gruppe*, d.h. pro Fluggesellschaft, ausgegeben.\n\n```{r}\nflights %>% \n  arrange(-arr_delay) %>% \n  select(arr_delay, carrier, month, day, dep_time, tailnum, flight, dest) %>% \n  group_by(carrier) %>% \n  filter(row_number() < 4) \n```\n\nVielleicht gefällt dem Chef diese Darstellung (sortiert nach `carrier`) besser:\n\n```{r}\nflights %>% \n  arrange(-arr_delay) %>% \n  select(arr_delay, carrier, month, day, dep_time, tailnum, flight, dest) %>% \n  group_by(carrier) %>% \n  filter(row_number() < 4) %>% \n  arrange(carrier)\n```\n\nDa Sie den Chef gut kennen, berechnen Sie gleich noch die durchschnittliche Verspätung pro Fluggesellschaft.\n\n```{r}\nflights %>% \n  select(arr_delay, carrier, month, day, dep_time, tailnum, flight, dest) %>% \n  group_by(carrier) %>% \n  summarise(delay_mean = mean(arr_delay, na.rm = TRUE)) %>% \n  arrange(-delay_mean) %>% \n  head\n```\n\nDer Chef ist zufrieden. Sie können sich wieder wichtigeren Aufgaben zuwenden...\n\n\n\n## Befehlsübersicht\n\n\nFunktion             Beschreibung\n-----------------    -------------\ndata                 Lädt Daten aus einem Paket.\ndplyr::glimpse       Zeigt einen Überblick über einen Datensatz\ndplyr::row_number    Gibt die Zeilennummern zurück.\n\n\n\n## Verweise\n\n- Eine ausführlichere Version einer \"YACSDA\"^[yet another case study on data analysis] findet sich hier^[https://sebastiansauer.github.io/Fallstudie_Flights/] oder hier^[https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html].\n\n- Es finden sich online viele ähnliche Datenanalysen zu `dplyr`, z.B. hier^[http://stat545.com/block009_dplyr-intro.html] oder hier^[http://genomicsclass.github.io/book/pages/dplyr_tutorial.html].\n\n",
    "created" : 1493219871276.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2697269894",
    "id" : "18BE494D",
    "lastKnownWriteTime" : 1493219992,
    "last_content_update" : 1493219992483,
    "path" : "~/Documents/Publikationen/In_Arbeit/Praxis_der_Datenanalyse/045_Fallstudie_dplyr.Rmd",
    "project_path" : "045_Fallstudie_dplyr.Rmd",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}