{
    "collab_server" : "",
    "contents" : "```{r include=FALSE, cache=FALSE}\nset.seed(1014)\noptions(digits = 3)\n\nknitr::opts_chunk$set(\n  message = FALSE,\n  warning = FALSE,\n  comment = \"#>\",\n  collapse = TRUE,\n  cache = TRUE,\n  out.width = \"70%\",\n  fig.align = 'center',\n  fig.width = 6,\n  fig.asp = 0.618,  # 1 / phi\n  fig.show = \"hold\"\n)\n\nwidth.cutoff=60\n```\n\n\n\n\n\n\n\\mainmatter\n\n\n\\setcounter{chapter}{0}\n\\part{Grundlagen}\n\n\n# Rahmen\n\n\n\n```{r echo = FALSE, out.width = \"30%\", fig.align = \"center\"}\nknitr::include_graphics(\"images/FOM.jpg\")\n```\n\n```{r echo = FALSE, out.width = \"10%\", fig.align = \"center\"}\nknitr::include_graphics(\"images/licence.png\")\n```\n\n```{block2, ziele-rahmen, type='rmdcaution', echo = TRUE} \nLernziele:\n\n- Einen Überblick über die fünf wesentliche Schritte der Datenanalyse gewinnen.\n- R und RStudio installieren können.\n- Einige häufige technische Probleme zu lösen wissen.\n- R-Pakete installieren können.\n- Einige grundlegende R-Funktionalitäten verstehen.\n- Auf die Frage \"Was ist Statistik?\" eine Antwort geben können.\n\n\n```\n\n\nIn diesem Skript geht es um die Praxis der Datenanalyse. Mit Rahmen ist das \n\"Drumherum\" oder der Kontext der eigentlichen Datenanalyse gemeint. Dazu gehören\neinige praktische Vorbereitungen und ein paar Überlegungen. Zum Beispiel \nbrauchen wir einen Überblick über das Thema. Voilà (Abb. \\@ref(fig:fig-prozess)):\n\n```{r fig-prozess, echo = FALSE, fig.cap = \"Der Prozess der Datenanalyse\"}\nknitr::include_graphics(\"images/Rahmen/Prozess_Datenanalyse.png\") \n```\n\n\nDatenanalyse, praktisch betrachtet, kann man in fünf Schritte einteilen [@r4ds].\nZuerst muss man die Daten *einlesen*, die Daten also in R (oder einer anderen \nSoftware) verfügbar machen (laden). Fügen wir hinzu: In *schöner Form* verfügbar\nmachen; man nennt dies auch *tidy data* (hört sich cooler an). Sobald die Daten in geeigneter \nForm in R geladen sind, folgt das *Aufbereiten*. Das beinhaltet Zusammenfassen, \nUmformen oder Anreichern je nach Bedarf. Ein nächster wesentlicher Schritt ist \ndas *Visualisieren* der Daten. Ein Bild sagt bekanntlich mehr als viele Worte. \nSchließlich folgt das *Modellieren* oder das Hypothesen prüfen: Man überlegt \nsich, wie sich die Daten erklären lassen könnten. Zu beachten ist, dass diese \ndrei Schritte - Aufbereiten, Visualisieren, Modellieren - keine starre Abfolge \nsind, sondern eher ein munteres Hin-und-Her-Springen, ein aufbauendes \nAbwechseln. Der letzte Schritt ist das *Kommunizieren* der Ergebnisse der \nAnalyse - nicht der Daten. Niemand ist an Zahlenwüsten interessiert; es gilt, \nspannende Einblicke zu vermitteln.\n\nDer Prozess der Datenanalyse vollzieht sich nicht im luftleeren Raum, sondern \nist in einem *Rahmen* eingebettet. Dieser beinhaltet praktische Aspekte - wie \nSoftware, Datensätze - und grundsätzliche Überlegungen - wie Ziele und \nGrundannahmen.\n\n\n\n\n## Software installieren\n\n\nAls Haupt-Analysewerkzeug nutzen wir R; daneben wird uns die sog. \n\"Entwicklungsumgebung\" RStudio einiges an komfortabler Funktionalität bescheren.\nEine Reihe von R-Paketen (\"Packages\"; d.h. Erweiterungen) werden wir auch \nnutzen. R ist eine recht alte Sprache; viele Neuerungen finden in Paketen \nNiederschlag, da der \"harte Kern\" von R lieber nicht so stark geändert wird. \nStellen Sie sich vor: Seit 29 Jahren nutzen Sie eine Befehl, der Ihnen einen \nMittelwert ausrechnet, sagen wir die mittlere Anzahl von Tassen Kaffee am Tag. \nUnd auf einmal wird der Mittelwert anders berechnet?! Eine Welt stürzt ein! \nNaja, vielleicht nicht ganz so tragisch in dem Beispiel, aber grundsätzlich sind\nÄnderungen in viel benutzen Befehlen potenziell problematisch. Das ist wohl ein \nGrund, warum sich am \"R-Kern\" nicht so viel ändert. Die Innovationen in R \npassieren in den Paketen. Und es gibt viele davon; als ich diese Zeilen \nschreibe, sind es fast schon 10.000! Genauer: 9937 nach dieser Quelle: \n<https://cran.r-project.org/web/packages/>.\n\n\n### R und RStudio installieren\n\n![](images/Rahmen/Rlogo.png){ width=20% } ![](images/Rahmen/rstudiologo.png){ width=20% }\n\nSie können R unter \n<https://cran.r-project.org> herunterladen und installieren (für Windows, Mac \noder Linux). RStudio finden Sie auf der gleichnamigen Homepage: \n<https://www.rstudio.com>; laden Sie die \"Desktop-Version\" für Ihr \nBetriebssystem herunter.\n\n\nDie Oberfläche von R, die \"Console\", sieht so aus:\n\n<!-- ![](images/R-small.jpg) ![](images/R-Mac-small.png) -->\n\n```{r eval = FALSE, echo = FALSE,  fig.width = 3} \n# knitr::include_graphics(\"images/Rahmen/R.jpg\") \nknitr::include_graphics(\"images/Rahmen/R-Mac-small.png\")\n\n```\n\n\nDie Oberfläche von RStudio sieht (unter allen Betriebssystemen etwa gleich) so \naus:\n\n```{r echo = FALSE} \nknitr::include_graphics(\"images/Rahmen/RStudio-Screenshot.png\")\n\n```\n\n\nDas *Skript-Fenster*\\index{Skript-Fenster} ähnelt einem normalem Text-Editor; \npraktischerweise finden Sie aber einen Button \"run\", der \ndie aktuelle Zeile oder die Auswahl \"abschickt\", d.h. in die \nKonsole gibt, wo die Syntax ausgeführt wird. Wenn Sie ein Skript-Fenster\nöffnen möchten, so können Sie das Icon ![new_script](images/Rahmen/new_script.png) \nklicken (Alternativ: Ctrl-Shift-N oder File > New File > R Script).\n\nAus dem Fenster der *Konsole*\\index{Konsole} spricht R zu uns bzw. \nwir mit R. Wird ein Befehl\\index{Funktion} (synonym: *Funktion*\\index{Funktion}) hier eingegeben, so führt R ihn aus. \nEs ist aber viel praktischer, Befehle in das Skript-Fenster einzugeben, als in\ndie Konsole. Behalten Sie dieses Fenster im Blick, wenn Sie Antwort von R erwarten.\n\nIm Fenster *Umgebung*\\index{Umgebung} (engl. \"environment\") zeigt R, \nwelche Variablen (Objekte) vorhanden sind. Stellen Sie sich die Umgebung wie einen\nKarpfenteich vor, in dem die Datensätze und andere Objekte herumschwimmen. Was nicht\nin der Umgebung angezeigt wird, existiert nicht für R.\n\nIm Fenster rechts unten werden mehrere Informationen bereit gestellt, z.B. \nwerden Diagramme (Plots) dort ausgegeben. Klicken Sie mal die anderen Reiter im Fenster\nrechts unten durch.\n\n\n\nWer Shortcuts mag, wird in RStudio überschwänglich beschenkt; der Shortcut für die Shortcuts ist `Shift-Alt-K`.\n\n\n Wenn Sie RStudio starten, startet R automatisch auch. Starten Sie daher, wenn \nSie RStudio gestartet haben, *nicht* noch extra R. Damit hätten Sie sonst zwei \nInstanzen von R laufen, was zu Verwirrungen (bei R und beim Nutzer) führen kann.\n\n\n### Sonstiges Material für dieses Skript\n\nBitte laden Sie sich auch das sonstige Material aus diesem [Github-Repositorium](https://github.com/sebastiansauer/Praxis_der_Datenanalyse/tree/gh-pages) herunter:\n\n- Daten (Ordner `data`)\n- Liste der benötigten R-Pakete (Datei `Pakete_fuer_PraDa.txt`)\n\nPraktischerweise lädt man im Standard ganze Ordner von Github herunter, so dass man nicht alle Dateien einzeln anpacken muss. Um Download-Zeit zu sparen, sind diese Ordner gezippt. Bevor Sie mit den Dateien arbeiten können, müssen Sie diese erst entzippen^[auf vielen Computern zu bewerkstelligen mit rechter Maustate/Kontextmenü und dann \"Dateien extrahieren\" o.ä., sonst Googeln.]. \n\n\n\n### Hilfe! R startet nicht!\n\n>    Manntje, Manntje, Timpe Te,   \n    Buttje, Buttje inne See,    \n    myne Fru de Ilsebill    \n    will nich so, as ik wol will. \n\n\n*Gebrüder Grimm, Märchen vom Fischer und seiner Frau^[<https://de.wikipedia.org/wiki/Vom_Fischer_und_seiner_Frau>]*\n\n\n\n\nIhr R startet nicht oder nicht richtig? Die drei wichtigsten Heilmittel sind:\n\n1. Schließen Sie die Augen für eine Minute. Denken Sie an etwas Schönes und was \nRs Problem sein könnte. \n2. Schalten Sie den Rechner aus und probieren Sie es \nmorgen noch einmal. \n3. Googeln.\n\nSorry für die schnoddrigen Tipps. Aber: Es passiert allzu leicht, dass man \n*Fehler* wie diese macht:\n\n\n\n```{block2, typ-fehler, type='rmdcaution', echo = TRUE} \n\nOH NO:\n\n- install.packages(dplyr) \n\n- install.packages(\"dliar\")\n\n- install.packages(\"derpyler\") \n\n- install.packages(\"dplyr\")  # dependencies vergessen \n\n- Keine Internet-Verbindung \n\n- library(dplyr)  # ohne vorher zu installieren\n\n```\n\n\n\n\n\nWenn R oder RStudio dann immer noch nicht starten oder nicht richtig laufen, \nprobieren Sie dieses:\n\n\n- Sehen Sie eine Fehlermeldung, die von einem fehlenden Paket spricht (z.B. \n\"Package 'Rcpp' not available\") oder davon spricht, dass ein Paket nicht \ninstalliert werden konnte (z.B. \"Package 'Rcpp' could not be installed\" oder \"es\ngibt kein Paket namens ‘Rcpp’\" oder \"unable to move temporary installation XXX \nto YYY\"), dann tun Sie folgendes:\n\n    - Schließen Sie R und starten Sie es neu. \n    - Installieren Sie das oder die angesprochenen Pakete mit `install.packages(\"name_des_pakets\", dependencies = TRUE)` oder mit dem entsprechenden Klick in RStudio. \n    - Starten Sie das entsprechende Paket mit `library(name_des_pakets)`.\n\n\n- Gerade bei Windows 10 scheinen die Schreibrechte für R (und damit RStudio oder\nRCommander) eingeschränkt zu sein. Ohne Schreibrechte kann R aber nicht die \nPakete (\"packages\") installieren, die Sie für bestimmte R-Funktionen benötigen. \nDaher schließen Sie R bzw. RStudio und suchen Sie das Icon von R oder wenn Sie \nRStudio verwenden von RStudio. Rechtsklicken Sie das Icon und wählen Sie \"als \nAdministrator ausführen\". Damit geben Sie dem Programm Schreibrechte. Jetzt \nkönnen Sie etwaige fehlende Pakete installieren.\n\n- Ein weiterer Grund, warum R bzw. RStudio die Schreibrechte verwehrt werden \nkönnten (und damit die Installation von Paketen), ist ein Virenscanner. Der \nVirenscanner sagt, nicht ganz zu Unrecht: \"Moment, einfach hier Software zu \ninstallieren, das geht nicht, zu gefährlich\". Grundsätzlich gut, in diesem Fall \nunnötig. Schließen Sie R/RStudio und schalten Sie dann den Virenscanner \n*komplett* (!) aus. Öffnen Sie dann R/RStudio wieder und versuchen Sie fehlende \nPakete zu installieren.\n\n\n\n#### I am an outdated model\n\n\nVerwenden Sie möglichst die neueste Version von R, RStudio und Ihres \nBetriebssystems. Ältere Versionen führen u.U. zu Problemen; je älter, desto \nProblem... Updaten Sie Ihre Packages regelmäßig z.B. mit `update.packages()` \noder dem Button \"Update\" bei RStudio (Reiter `Packages`).\n\n\n\n\n\n### Pakete \n\nEin Großteil der Neuentwicklungen bei R passiert in sog. 'Paketen' (engl. *packages*), das sind Erweiterungen für R. Jeder, der sich berufen fühlt, kann ein R-Paket schreiben und es zum 'R-Appstore' ([CRAN](https://cran.r-project.org/)) hochladen. Von dort kann es dann frei (frei wie in Bier) heruntergeladen werden.\n\nAm einfachsten installiert man R-Pakete in RStudio über den Button \"Install\" im Reiter \"Packages\" (s. Abb. \\@ref(fig:fig-install-packages)).\n\n```{r fig-install-packages, echo = FALSE, fig.cap = \"So installiert man Pakete in RStudio\"}\n\nknitr::include_graphics(\"images/Rahmen/install_packages.png\")\n\n```\n\n\nEin R-Paket, welches für die praktische Datenanalyse praktisch ist, heißt \n`tidyverse`. Wir werden viel mit diesem Paket arbeiten. Bitte installieren Sie es \nschon einmal, sofern noch nicht geschehen. Sie können auch folgenden Befehl verwenden, um Pakete zu installieren.\n\n```{r eval = FALSE} \ninstall.packages(\"tidyverse\", dependencies = TRUE) \n```\n\n\nSofern Sie online sind, sollte das Paket `tidyverse` jetzt installiert sein.\n\n```{block2, CRAN_mirrors, type='rmdcaution', echo = TRUE} \nBeim Installieren von \nR-Paketen könnten Sie gefragt werden, welchen \"Mirror\" Sie verwenden möchten. \nDas hat folgenden Hintergrund: R-Pakete sind in einer Art \"App-Store\", mit Namen\nCRAN (Comprehense R Archive Network) gespeichert. Damit nicht ein armer, kleiner\nServer überlastet wird, wenn alle Studis dieser Welt just gerade beschließen, \nein Paket herunterzuladen, gibt es viele Kopien dieses Servers - seine Spiegelbilder (engl. \"mirrors\"). \nSuchen Sie sich einfach einen aus, der in der Nähe ist.\n\n```\n\n\nBei der Installation von Paketen mit `install.packages(\"name_des_pakets\")` \nsollte stets der Parameter `dependencies = TRUE` angefügt werden. Also \n`install.packages(\"name_des_pakets\", dependencies = TRUE)`. Hintergrund ist: \nFalls das zu installierende Paket seinerseits Pakete benötigt, die noch nicht \ninstalliert sind (gut möglich), dann werden diese sog. \"dependencies\" gleich \nmitinstalliert (wenn Sie  `dependencies = TRUE` setzen).\n\n\n\nNicht vergessen: Installieren muss man eine Software *nur einmal*; *starten* \n(laden) muss man sie jedes Mal, wenn man sie vorher geschlossen hat und wieder \nnutzen möchte:\n\n```{r eval = FALSE} \nlibrary(dplyr) \n```\n\nDer Befehl bedeutet sinngemäß: \"Hey R, geh in die Bücherei (library) und hole \ndas Buch (package) dplyr!\".\n\n\n```{block2, quotation_marks, type='rmdcaution', echo = TRUE} \nWann benutzt man bei R Anführungszeichen? Das ist etwas verwirrend im Detail, aber die Grundegel \nlautet: wenn man Text anspricht. Im Beispiel oben \"library(dplyr)\" ist \"dplyr\" \nhier erst mal für R nichts Bekanntes, weil noch nicht geladen. Demnach müssten \n*eigentlich* Anführungsstriche stehen. Allerdings meinte ein Programmierer, dass\nes doch so bequemer ist. Hat er Recht. Aber bedenken Sie, dass es sich um die \nAusnahme einer Regel handelt. Sie können also auch schreiben: library(\"dplyr\") \noder library('dplyr'); geht beides.\n\n```\n\n\n\nDas Installieren und Starten anderer Pakete läuft genauso ab. Am besten \ninstallieren Sie alle Pakete, die wir in diesem Buch benötigen auf einmal, dann \nhaben Sie Ruhe (eine schnelle Internetverbindung vorausgesetzt).\n\n\n### R-Pakete für dieses Buch \n\nIn diesem Skript verwenden wir die folgenden \nR-Pakete; diese müssen installiert sein und geladen. Ggf. benötigen Sie Administrator-Rechte, um Pakete zu installieren. Virenscanner müssen evtl. ausgestaltet sein. \n\n\n```{r source_packages, include = FALSE, message = FALSE, warning = FALSE} \nsource(\"includes/Pakete.R\") \n```\n\n\n```{r Paketliste, echo = FALSE} \npackages[-1]\n```\n\nMit folgenden Befehlen installieren Sie alle Pakete für diesen Kurs auf einmal. Das ist ganz praktisch, weil Sie ggf. Aktualisierungen bereits installierter Pakete bekommen.\n\n```{r install-packages, eval = FALSE}\nload(\"div/Pakete_fuer_PraDa.Rda\")\ninstall.packages(packages)\n```\n\nDenken Sie daran, dass dieser Befehl - und alle anderen, die auf Dateien zu diesem Skript zugrifen, davon ausgehen, dass das Arbeitsverzeichnis passend gesetzt ist (vgl. Kapitel \\@ref(wd)). Für jedes Kapitel ist angegeben, welches Kapitels jeweils benötigt d.h. zu laden sind. \n\n\n### Vertiefung: Zuordnung von Paketen zu Befehlen\n\n\n*Woher weiß man, welche Befehle (oder auch Daten) in einem Paket enthalten sind?*\n\nEine einfache Möglichkeit ist es, beim Reiter 'Pakete' auf den Namen eines der installierten Pakete zu klicken. Daraufhin öffnet sich die Dokumentation des Pakets und man sieht dort alle Befehle und Daten aufgeführt (s. Abbildung \\@ref(fig:pakete-hilfe)). Übrigens sehen Sie dort auch die Version eines Pakets (vielleicht sagt jemand mal zu Ihnen, \"Sie sind ja outdated\", dann schauen Sie mal auf die die Paket-Versionen).\n\n```{r pakete-hilfe, echo = FALSE, fig.cap = \"Hier werden Sie geholfen: Die Dokumentation der R-Pakete\", out.width = \"50%\"}\n\nknitr::include_graphics(\"images/Rahmen/hilfe_pakete.png\")\n```\n\n\nFür geladenen Pakete kann man auch den Befehl `help` nutzen, z.B. `help(ggplot2)`.\n\n\n*Und umgekehrt, woher weiß ich, in welchem Paket ein Befehl 'wohnt'?*\n\nProbieren Sie den Befehl `help.search(\"qplot\")`, wenn Sie wissen möchten, in welchem Paket `qplot` zuhause ist. `help.search` sucht alle Hilfeseiten von *installierten* Paketen, in der der Suchbegriff irgendwie vorkommt. Um das Paket eines *geladenen* Befehl zu finden, hilft der Befehl `find`: `find(\"qplot\")`.\n\n\nSie können auch diesen selbstgestrickten Befehl nutzen, den Sie zuerst laden müssen:\n\n```{r}\nsource(\"https://sebastiansauer.github.io/Rcode/find_funs.R\")\nfind_funs(\"select\")\n```\n\n\nIn diesem Skript sind am Ende jedes Kapitels die jeweils besprochenen (neuen) Befehle aufgeführt - inklusive ihres Paketes. Falls bei einem Befehl kein Paket angegeben ist, heißt das, dass der Befehl im 'Standard-R' wohnt - Sie müssen kein weiteres Paket laden^[Eine Liste der Pakete, die beim Standard-R enthalten sind (also bereits installiert sind) finden Sie [hier](https://stat.ethz.ch/R-manual/R-devel/doc/html/packages.html)]. Also zum Beispiel `ggplot2::qplot`: Der *Befehl* `qplot` ist im *Paket* `ggplot2` enthalten. Das Zeichen `::` trennt also Paket von Befehl.\n\n\n\n\n```{block2, ziele-double-colon, type='rmdcaution', echo = TRUE} \n\nManche Befehle haben Allerweltsnamen (z.B. 'filter'). Manchmal gibt es Befehle mit gleichem Namen in verschiedenen Paketen; besonders Befehle mit Allerweltsnamen (wie 'filter') sind betroffen ('mosaic::filter' vs. 'dplyr::filter'). Falls Sie von wirre Ausgaben bekommen oder diffuse Fehlermeldung kann es sein, kann es sein, dass R einen Befehl mit dem richtigen Namen aber aus dem 'falschen' Paket zieht. Geben Sie im Zweifel lieber den Namen des Pakets vor dem Paketnamen an, z.B. so `dplyr::filter`.\n```\n\n\nAußerdem sind zu Beginn jedes Kapitels die in diesem Kapitel benötigten Pakete angegeben. Wenn sie diese Pakete laden, werden alle Befehle dieses Kapitels funktionieren^[es sei denn, sie tun es nicht].\n\n\n\n*Wie weiß ich, ob ein Paket geladen ist?*\n\nWenn der Haken im Reiter 'Packages' gesetzt ist (s. Abbildung \\@ref(fig:pakete-hilfe)), dann ist das Paket geladen. Sonst nicht.\n\n\n\n\n\n### Datensätze {#daten}\n\nDie folgenden Datensätze liegen [hier](https://github.com/sebastiansauer/Praxis_der_Datenanalyse/tree/gh-pages/data). Bitte laden Sie den Ordner Ordner herunter.\n\n- Datensatz `profiles` aus dem R-Paket {okcupiddata} [@kim2015okcupid]; es handelt sich um Daten von einer Online-Singlebörse \n- Datensatz `Wage` aus dem R-Paket {ISLR} [@introstatlearning]; es handelt sich um Gehaltsdaten von US-amerikanischen Männern \n- Datensatz `inf_test_short`, URL: <https://osf.io/sjhu> [@Sauer_2017]; es handelt sich um Ergebnisse einer Statistikklausur \n- Datensatz `flights` aus dem R-Paket {nycflights13} [@nycflights13]; es handelt sich um Abflüge von den New Yorker Flughäfen \n- Datensatz 'wo_men`, URL: <https://osf.io/ja9dw> [@Sauer_2017a]; es handelt sich um Körper- und Schuhgröße von Studierenden\n- Datensatz `tips` aus dem R-Paket {reshape2} [@bryant1995practical]; es handelt sich um Trinkgelder in einem Restaurant \n- Datensatz `extra`, URL: <https://osf.io/4kgzh> [@Sauer_2016]; es handelt sich die Ergebnisse einer Umfrage zu Extraversion\n- Datensatz `Werte` URL: <https://osf.io/4kgzh/> [@Gansser_2017]; es handelt sich um Werte von Studierenden\n- Datensatz `Segment` URL: <https://goo.gl/eUm8PI> [@Chapman2015]; es handelt sich um soziodemographische Daten (simuliert)\n\n\nWie man Daten in R 'einlädt' (Studierende sagen gerne 'ins R hochladen'), besprechen wir im Kapitel \\@ref(daten-einlesen).\n\n\n\n\n\n\n\n\n## ERRRstkontakt\n\n\n### R-Skript-Dateien\n\n- Ein neues *R-Skript*\\index{R-Skript} im RStudio können Sie z.B. öffnen mit `File-New File-R Script`. Schreiben Sie dort Ihre R-Befehle; Sie können die Skriptdatei speichern, öffnen, ausdrucken, übers Bett hängen... R-Skripte können Sie speichern (unter `File-Save`) und öffnen. R-Skripte sind einfache Textdateien, die jeder Texteditor verarbeiten kann. \nNur statt der Endung `.txt`, sind R-Skripte stolzer Träger der Endung `.R`. Es \nbleibt aber eine schnöde Textdatei. Geben Sie Ihren R-Skript-Dateien die Endung \".R\",\ndamit erkennt RStudio, dass es sich um ein R-Skript handelt und bietet ein paar \npraktische Funktionen wie den \"Run-Button\".\n\n\n\n\n### Datentypen in R\n\nDie (für diesen Kurs) wichtigsten Datentypen von R sind in Tabelle \\@ref(tab:datentypen) aufgeführt.\n\n```{r datentypen, echo = FALSE}\ndf <- readr::read_csv(\"includes/Datentypen.csv\")\n\nknitr::kable(df, caption = \"Wichtige Datentypen in R\")\n```\n\nFür die praktische Datenanalyse ist der `dataframe` (Dataframe) am wichtigsten. Grob gesagt handelt es sich dabei um eine Tabelle, wie man sie aus Excel kennt. Etwas genauer ist eine Kombination von Vektoren mit gleicher Länge, so dass eine 'rechteckige' Datenstruktur entsteht. Alle Spalten (d.h. Vektoren) haben einen Namen, so dass es 'Spaltenköpfe' gibt. Eine neuere Variante von Dataframes sind 'tibbles', die *auch* Dataframes sind, aber ein paar praktische Zusatzeigenschaften aufweisen.\n\n\n### Hinweise\n\nUnser erster Kontakt mit R! Ein paar Anmerkungen vorweg:\n\n- R unterscheidet zwischen Groß- und Kleinbuchstaben, d.h. `Oma` und `oma` sind \nzwei verschiedene Dinge für R!\n- R verwendet den Punkt `.` als \nDezimaltrennzeichen.\n- Fehlende Werte werden in R durch `NA` kodiert.\n- Kommentare werden mit dem Rautezeichen `#` eingeleitet; der Rest der Zeile von von R dann ignoriert. \n- *Variablennamen*\\index{Variablen} in R müssen mit Buchstaben beginnen; ansonsten dürfen nur Zahlen, Unterstriche `-` und Minuszeichen `-` enthalten sein. Leerzeichen sollte man meiden.\n- Variablen einen Namen zu geben, ist nicht leicht, aber wichtig. Namen sollten knapp, aber aussagekräftig sein.\n\n```\n# so nicht:\nvar\nx\ndummy\nobjekt\ndieser_name_ist_etwas_lang_vielleicht\n\n# gut:\ntips_mw\nlm1\n```\n\nUm den Inhalt einer Variablen auszulesen, geben wir einfach den Namen des Objekts ein (und schicken den Befehl ab).\n\n### R als Taschenrechner\n\nAuch wenn Statistik nicht Mathe ist, so kann man mit R \nauch rechnen. Geben Sie zum Üben die Befehle in der R Konsole hinter der \nEingabeaufforderung `>` ein und beenden Sie die Eingabe mit `Return` bzw. \n`Enter`. \n\n```{r} \n4+2 \n``` \nDas Ergebnis wird direkt angezeigt. Bei \n```{r} \nx <- 4+2 \n``` \n\nerscheint zunächst kein Ergebnis. Über `<-` wird der Variable `x` der Wert \n`4+2` zugewiesen. Wenn Sie jetzt \n```{r eval=FALSE} \nx \n``` \n\neingeben, wird das \nErgebnis \n```{r echo=FALSE} \nx\n``` \n\nangezeigt. Sie können jetzt auch mit `x` \nweiterrechnen, z.B.: \n\n```{r} \nx/4 \n``` \n\nVielleicht fragen Sie sich was die `[1]` vor dem \nErgebnis bedeutet. R arbeitet vektororientiert, und die `[1]` zeigt an, dass es \nsich um das erste (und hier auch letzte) Element des Vektors handelt.\n\n\n### Text und Variablen zuweisen\n\nMan kann einer Variablen auch Text zuweisen (im Gegensatz zu Zahlen):\n\n```{r hallo, eval = FALSE}\ny <- \"Hallo R!\"\n```\n\n\nMan kann auch einer Variablen eine andere zuweisen:\n\n```{r eval = FALSE}\ny <- x\n```\n\nWird jetzt y mit dem Inhalt von x überschrieben oder umgekehrt? Der Zuweisungspfeil `<-` macht die Richtung der Zuweisung ganz klar. Zwar ist in R das Gleichheitszeichen synonym zum Zuweisungspfeil erlaubt, aber der Zuweisungspfeil macht die Sache glasklar und sollte daher bevorzugt werden.\n\n\nMan kann auch einer Variablen *mehr als* einen Wert zuweisen:\n\n```{r}\nx <- c(1, 2, 3)\n```\n\nDieser Befehl erzeugt eine \"Spalte\" (einen Vektor). Will man einer Variablen *mehr als* einen Wert zuweisen, muss man die Werte erst in einen Vektor \"zusammen binden\"; das geht mit dem Befehl `c` (vom engl. \"***c**ombine*\").\n\n\n\n\n### Funktionen aufrufen\n\n\nUm einen *Befehl*\\index{Befehl, Funktion} (präziser aber synonym hier: eine Funktion) aufzurufen, geben wir ihren Namen an und definieren sog. *Parameter*\\index{Parameter eines R-Befehls} in einer runden Klammer, z.B. so:\n\n```{r eval = FALSE}\nwo_men <- read.csv(\"data/wo_men.csv\")\n```\n\nAllgemein gesprochen:\n\n```\nfunktionsname(parametername1 = wert1, parametername2 = wert2, ...)\n```\n\nDie drei Punkte `...` sollen andeuten, dass evtl. weitere Parameter zu übergeben wären. \nDie Reihenfolge der Parameter ist *egal* - wenn man die Parameternamen anführt. \nAnsonsten muss man sich an die Standard-Reihenfolge, die eine Funktion vorgibt halten:\n\n```{r read-csv-example, eval = FALSE}\n#ok:\nwo_men <- read.csv(file = \"data/wo_men.csv\", header = TRUE, sep = \",\")\nwo_men <- read.csv(\"data/wo_men.csv\", TRUE, \",\")\nwo_men <- read.csv(header = TRUE, sep = \",\", file = \"data/wo_men.csv\")\n\n\n# ohno:\nwo_men <- read.csv(TRUE, \"data/wo_men.csv\", \",\")\n```\n\n\nIn der Hilfe zu einem Befehl findet man die Standard-Syntax inklusive der möglichen Parameter, ihrer Reihenfolge und Standardwerten (default values) von Parametern. Zum Beispiel ist beim Befehl `read.csv` der Standardwert für `sep` mit `;` voreingestellt (schauen Sie mal in der Hilfe nach). Gibt man einen Parameter nicht an, für den ein Standardwert eingestellt ist, 'befüllt' R den Parameter mit diesem Standardwert.\n\n\n### Das Arbeitsverzeichnis {#wd}\n\n\nDas aktuelle Verzeichnis (Arbeitsverzeichnis; \"working directory\") kann man mit `getwd()` erfragen und mit `setwd()` einstellen. Komfortabler ist es aber, das aktuelle Verzeichnis per Menü zu ändern (vgl. Abb. \\@ref(fig:Arbeitsverzeichnis). In RStudio: `Session > Set Working Directory > Choose Directory ...` (oder per Shortcut, der dort angezeigt wird).\n\n```{r Arbeitsverzeichnis, echo = FALSE, fig.cap = \"Das Arbeitsverzeichnis mit RStudio auswählen\", out.width = \"50%\"}\n\nknitr::include_graphics(\"images/tidy/Arbeitsverzeichnis.png\")\n```\n\n\nEs ist praktisch, das Arbeitsverzeichnis festzulegen, denn dann kann man z.B. eine Datendatei einlesen, ohne den Pfad eingeben zu müssen:\n\n```{r eval = FALSE}\n# nicht ausführen:\ndaten_deutsch <- read.csv(\"daten_deutsch.csv\", sep = \";\", dec = \".\")\n```\n\nR geht dann davon aus, dass sich die Datei `daten_deutsch.csv` im Arbeitsverzeichnis befindet.\n\n\nFür diesen Kurs ist es sinnvoll, das Arbeitsverzeichnis in einen \"Hauptordner\" zu legen (z.B. \"Praxis_der_Datenanalyse\"), in dem Daten und sonstiges Material als Unterordner abgelegt sind.\n\n\n```{block2, working-directory, type='rmdcaution', echo = TRUE} \n\nÜbrigens: Wenn Sie keinen Pfad angeben, so geht R davon aus, dass die Daten im aktuellen Verzeichnis (dem *working directory*) liegen. \n\n```\n\n\n\n### Hier werden Sie geholfen\n\nEs ist keine Schande, nicht alle Befehle der ca. 10,000 R-Pakete auswendig zu \nwissen. Schlauer ist, zu wissen, wo man Antworten findet. Hier eine Auswahl:\n\n- Zu diesen Paketen gibt es gute \"Spickzettel\" (cheatsheets): ggplot2, \nRMarkdown, dplyr, tidyr. Klicken Sie dazu in RStudio auf *Help > Cheatsheets > \n...* oder gehen Sie auf <https://www.rstudio.com/resources/cheatsheets/>.\n\n- In RStudio gibt es eine Reihe (viele) von Tastaturkürzeln (Shortcuts), die Sie\nhier finden: *Tools > Keyboard Shortcuts Help*.\n\n- Für jeden Befehl (d.i. Funktion) können Sie mit `?` Hilfe erhalten; probieren \nSie z.B. `?mean`.\n\n- Im Internet finden sich zuhauf Tutorials.\n\n- Der Reiter \"Help\" bei RStudio verweist auf die Hilfe-Seite des jeweiligen Pakets bzw. Befehls.\n\n- Die bekannteste Seite, um Fragen rund um R zu diskutieren ist \n<http://stackoverflow.com>.\n\n\n\n### Aufgaben \n\n\n1. Öffnen Sie das Cheatsheet für RStudio und machen Sie sich mit dem Cheatsheet vertraut.\n\n2. Sichten Sie kurz die übrigen Cheatsheets; später werden die Ihnen vielleicht von Nutzen sein.\n\n\n3. Führen Sie diese Syntax aus:\n\n```{r eval = FALSE}\nmeine_coole_variable <- 10\nmeine_coole_var1able \n```\n\nWoher rührt der Fehler?\n\n4. Korrigieren Sie die Syntax:\n\n```{r eval = FALSE}\ninstall.packages(dplyer)\n```\n\n\n`y <- Hallo R!`\n\n\n`Hallo R <- 1`\n\n\n```{r eval = FALSE}\nHallo_R < - 1\n```\n\n\n## Was ist Statistik? Wozu ist sie gut?\n\nZwei Fragen bieten sich sich am Anfang der Beschäftigung mit jedem Thema an: Was\nist die Essenz des Themas? Warum ist das Thema (oder die Beschäftigung damit) \nwichtig?\n\nWas ist Statistik? *Eine* Antwort dazu ist, dass Statistik die Wissenschaft von\nSammlung, Analyse, Interpretation und Kommunikation von Daten ist mithilfe \nmathematischer Verfahren ist und zur Entscheidungshilfe beitragen solle \n[@oxford; @sep-statistics]. Damit hätten wir auch den Unterschied zur schnöden \nDatenanalyse (ein Teil der Statistik) herausgemeißelt. Statistik wird häufig in \ndie zwei Gebiete *deskriptive* und *inferierende* Statistik eingeteilt (vgl. Abb. \\@ref(fig:desk-vs-inf)). Erstere \nfasst viele Zahlen zusammen, so dass wir den Wald statt vieler Bäume sehen. \nLetztere verallgemeinert von den vorliegenden (sog. \"Stichproben-\")Daten auf \neine zugrunde liegende Grundmenge (Population). Dabei spielt die \nWahrscheinlichkeitsrechnung (Stochastik) eine große \nRolle.\n\n```{r desk-vs-inf, echo = FALSE, fig.cap  =\"Sinnbild für die Deskriptiv- und die Inferenzstatistik\"}\n\nknitr::include_graphics(\"images/Rahmen/desk_vs_inf-crop.png\")\n```\n\n\n\nAufgabe der deskriptiven Statistik ist es primär, Daten prägnant \nzusammenzufassen. Aufgabe der Inferenzstatistik ist es, zu prüfen, ob Daten \neiner Stichprobe auf eine Grundgesamtheit verallgemeinert werden können.\n\n\nDabei lässt sich der Begriff \"Statistik\" als Überbegriff von \"Datenanalyse\" \nverstehen, wenn diese Sicht auch nicht von allen geteilt wird \n[@grolemund2014cognitive]. In diesem Buch steht die Aufbereitung, Analyse, \nInterpretation und Kommunikation von Daten im Vordergrund. Liegt der Schwerpunkt\ndieser Aktivitäten bei computerintensiven Methoden, so wird auch von *Data \nScience* gesprochen, wobei der Begriff nicht einheitlich verwendet wird [@r4ds;\n@hardin2015data]\n\n*Daten* kann man definieren als *Informationen, die in einem Kontext stehen*\n[@moore1990uncertainty], wobei eine numerische Konnotation mitschwingt.\n\n*Modellieren* kann man als *zentrale Aufgabe von Statistik* begreifen \n[@cobb2007introductory; @grolemund2014cognitive]. Einfach gesprochen, bedeutet \nModellieren in diesem Sinne, ein mathematisches Narrativ (\"Geschichte\") zu \nfinden, welches als Erklärung für gewisse Muster in den Daten fungiert; vgl. \nKap. \\@ref(mod1).\n\nStatistisches Modellieren läuft gewöhnlich nach folgendem Muster ab [@grolemund2014cognitive]:\n\n\n```\nPrämisse 1: Wenn Modell M wahr ist, dann sollten die Daten das Muster D aufweisen.\nPrämisse 2: Die Daten weisen das Muster D auf.\n---\nKonklusion: Daher muss das Modell M wahr sein.\n```\n\nDie Konklusion ist *nicht* zwangsläufig richtig. Es ist falsch zu sagen, dass dieses Argumentationsmuster - Abduktion [@peirce1955abduction] genannt - wahre, sichere Schlüsse (Konklusionen) liefert. Die Konklusion *kann, muss aber nicht*, zutreffen.\n\nEin Beispiel: Auf dem Nachhauseweg eines langen Arbeitstags wartet, in einer dunklen Ecke, ein Mann, der sich als Statistik-Professor vorstellt und Sie zu einem Glücksspiel einlädt. Sofort sagen Sie zu. Der Statistiker will 10 Mal eine Münze werfen, er setzt auf Zahl (versteht sich). Wenn er gewinnt, bekommt er 10€ von Ihnen; gewinnen Sie, bekommen Sie 11€ von ihm. Hört sich gut an, oder? Nun wirft er die Münze zehn Mal. Was passiert? Er gewinnt 10 Mal, natürlich (so will es die Geschichte). Sollten wir glauben, dass er ein Betrüger ist?\n\nEin Modell, welches wir hier verwenden könnten, lautet: Wenn die Münze gezinkt ist (Modell M zutrifft), dann wäre diese Datenlage D (10 von 10 Treffern) wahrscheinlich - Prämisse 1. Datenlage D ist tatsächlich der Fall; der Statistiker hat 10 von 10 Treffer erzielt - Prämisse 2. Die Daten D \"passen\" also zum Modell M; man entscheidet sich, dass der Professor ein Falschspieler ist. \n\nWichtig zu erkennen ist, dass Abduktion mit dem Wörtchen *wenn* beginnt. Also davon *ausgeht*, dass ein Modell M der Fall ist (der Professor also tatsächlich ein Betrüger ist). Das, worüber wir entscheiden wollen, wird bereits vorausgesetzt. Falls M gilt, gehen wir mal davon aus, wie gut passen dann die Daten dazu? \n\n>    Wie gut passen die Daten D zum Modell M?\n\nDas ist die Frage, die hier tatsächlich gestellt bzw. beantwortet wird.\n\nNatürlich ist es keineswegs sicher, *dass* das Modell gilt. Darüber macht die Abduktion auch keine Aussage. Es könnte also sein, dass ein anderes Modell zutrifft: Der Professor könnte ein Heiliger sein, der uns auf etwas merkwürdige Art versucht, Geld zuzuschanzen... Oder er hat einfach Glück gehabt.\n\n>   Statistische Modelle beantworten i.d.R. nicht, wie wahrscheinlich es ist, dass ein Modell gilt. Statistische Modelle beurteilen, wie gut Daten zu einem Modell passen.\n\nHäufig trifft ein Modell eine Reihe von Annahmen, die nicht immer explizit gemacht werden, aber die klar sein sollten. Z.B. sind die Münzwürfe unabhängig voneinander? Oder kann es sein, dass sich die Münze \"einschießt\" auf eine Seite? Dann wären die Münzwürfe nicht unabhängig voneinander. In diesem Fall klingt das reichlich unplausibel; in anderen Fällen kann dies eher der Fall sein[^447]. Auch wenn die Münzwürfe unabhängig voneinander sind, ist die Wahrscheinlichkeit für Zahl jedes Mal gleich? Hier ist es wiederum unwahrscheinlich, dass sich die Münze verändert, ihre Masse verlagert, so dass eine Seite Unwucht bekommt. In anderen Situationen können sich Untersuchungsobjekte verändern (Menschen lernen manchmal etwas, sagt man), so dass die Wahrscheinlichkeiten für ein Ereignis unterschiedlich sein können, man dies aber nicht berücksichtigt. \n\n\n## Befehlsübersicht\n\nTabelle \\@ref(tab:befehle-rahmen) stellt die Befehle dieses Kapitels dar. \n\n```{r befehle-rahmen, echo = FALSE}\n\ndf <- readr::read_csv(\"includes/Befehle_Rahmen.csv\")\n\nknitr::kable(df, caption = \"Befehle des Kapitels 'Rahmen'\")\n\n```\n\n\n\n\n\n\nDiese Befehle \"wohnen\" alle im Standard-R; es ist für diese Befehle nicht nötig, zusätzliche Pakete zu installieren/ laden.\n\n\n## Verweise\n\n- Chester Ismay erläutert einige Grundlagen von R und RStudio, die für \nDatenanalyse hilfreich sind: https://bookdown.org/chesterismay/rbasics/.\n\n- Roger Peng und Kollegen bieten hier einen Einstieg in Data Science mit R: \nhttps://bookdown.org/rdpeng/artofdatascience/\n\n- Wickam und Grolemund [-@r4ds] geben einen hervorragenden Überblick in das \nThema dieses Buches; ihr Buch ist sehr zu empfehlen.\n\n- Wer einen stärker an der Statistik orientierten Zugang sucht, aber \n\"mathematisch sanft\" behandelt werden möchte, wird bei James et al. \n[-@introstatlearning] glücklich oder zumindest fündig werden.\n\n\n\n\n\n[^447]: Sind z.B. die Prüfungsergebnisse von Schülern unabhängig voneinander? Möglicherweise haben sie von einem \"Superschüler\" abgeschrieben. Wenn der Superschüler viel weiß, dann zeigen die Abschreiber auch gute Leistung.",
    "created" : 1497010662023.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3654778145",
    "id" : "DE3E4121",
    "lastKnownWriteTime" : 1497283645,
    "last_content_update" : 1497283645808,
    "path" : "~/Documents/Publikationen/In_Arbeit/Praxis_der_Datenanalyse/020_Rahmen.Rmd",
    "project_path" : "020_Rahmen.Rmd",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}