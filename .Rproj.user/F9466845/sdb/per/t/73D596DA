{
    "collab_server" : "",
    "contents" : "```{r include=FALSE, cache=FALSE}\nset.seed(1014)\noptions(digits = 3)\n\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  message = FALSE,\n  warning = FALSE,\n  cache = TRUE,\n  out.width = \"70%\",\n  fig.align = 'center',\n  fig.width = 6,\n  fig.asp = 0.618,  # 1 / phi\n  fig.show = \"hold\"\n)\n\n```\n\n\n\n# Vertiefung: Dimensionsreduktion\n\n\n```{r echo = FALSE, out.width = \"30%\", fig.align = \"center\"}\nknitr::include_graphics(\"images/FOM.jpg\")\n```\n\n```{r echo = FALSE, out.width = \"10%\", fig.align = \"center\"}\nknitr::include_graphics(\"images/licence.png\")\n```\n\n\n```{block2, ziele-dimred, type='rmdcaution', echo = TRUE} \nLernziele:\n\n- Den Unterschied zwischen einer Hauptkomponentenanalyse und einer Exploratorische Faktorenanalyse kennen\n- Methoden kennen, um die Anzahl von Dimensionen zu bestimmen\n- Methoden der Visualisierung anwenden können\n- Umsetzungsmethoden in R anwenden können\n- Ergebnisse interpretieren können.\n\n```\n\n\nIn diesem Kapitel werden folgende Pakete benötigt:\n\n```{r}\nlibrary(corrplot)  # für `corrplot`\nlibrary(gplots)  # für `heatmap.2`\nlibrary(nFactors)  # PCA und EFA\nlibrary(tidyverse)  # Datenjudo\nlibrary(psych)  # für z.B. 'alpha'\n\n```\n\n\n## Einführung\n\nDatensätze in den Sozialwissenschaften, und damit auch in der Wirtschaftspsychologie, haben oft viele Variablen - oder auch Dimensionen - und es ist vorteilhaft, diese auf eine kleinere Anzahl von Variablen (oder Dimensionen) zu reduzieren. Zusammenhänge zwischen verschiedenen Dimensionen oder Unterschiede zwischen verschiedenen Gruppen bezüglich einer oder mehrerer Dimensionen (z. B. bei Experimenten) können so klarer und einfacher identifiziert werden. Dimensionen mit konkreten Sachverhalten werden in der Sprache der Wissenschaft häufig als *Konstrukte*\\index{Konstrukte} bezeichnet. \n\nKonstrukte stellen in den Sozialwissenschaften gedankliche bzw. theoretische Sachverhalt dar, die nicht direkt beobachtbar und damit nicht direkt messbar sind. Nehmen wir beispielsweise an, es soll das Konstrukt *Anerkennung* im Rahmen einer sozialwissenschaftlichen Studie gemessen werden. Dabei gibt es zunächst zwei Fragestellungen:\n\n1. Was bedeutet Anerkennung? \n2. Wie wird Anerkennung gemessen?\n\nLiest man bei Wikipediea diesen Begriff nach, kommt folgende Antwort: \"Anerkennung bedeutet die Erlaubnis einer Person oder einer Gruppe gegenüber einer anderen Person, Gruppe oder Institution, sich mit ihren derzeitigen spezifischen Eigenschaften an der Kommunikation, an Entscheidungsprozessen oder anderen gesellschaftlichen Prozessen zu beteiligen. Der Begriff Anerkennung wird auch als Synonym für Akzeptanz, Lob oder Respekt verwendet.\" Gut, wir kennen nun die Bedeutung von Anerkennung, aber wir wissen immer noch nicht, wie wir Anerkennung messen können. Da die Suche nach Anerkennung in der Psychologie kein neues `Konstrukt` darstellt, sondern schon vielfach gemessen wurde, müssen wir nur in bisherigen Forschungsergebnissen nachlesen. Dies führt unweigerlich dazu, dass wir auf bisherige Forschungen stoßen, die das Konstrukt Anerkennung als ein `multidimensionales Konstrukt` definieren und mit mehr als einem *Item (Indikator)*\\index{Item} messen. Mehr zur Messung von Anerkennung weiter unten im Datenbeispiel. D. h. der Sachverhalt `Anerkennung` wird aus anderen, messbaren Sachverhalten `(Indikatoren)` messbar gemacht. Der Prozess des *\"Messbar machens\"* heißt *Operationalisierung*\\index{Operationalisierung}. Mehr zur Operationalisierung von Anerkennung und anderen Konstrukten betrachten wir weiter untern im Datenbeispiel. \n\nIn diesem Kapitel betrachten wir zwei gängige Methoden, um die Komplexität von multivarianten, metrischen Daten zu reduzieren, indem wir die Anzahl der Dimensionen in den Daten reduzieren. \n\n* Die *Hauptkomponentenanalyse*\\index{Hauptkomponentenanalyse} (engl. principal component analysis, PCA) versucht, unkorrelierte Linearkombinationen zu finden, die die maximale Varianz in den Daten erfassen. Die PCA\\index{PCA} beinhaltet also das Extrahieren von linearen Zusammenhängen der beobachteten Variablen. \n* Die *Exploratorische Faktorenanalyse (EFA)*\\index{Exploratorische Faktorenanalyse} versucht, die Varianz auf Basis einer kleinen Anzahl von Dimensionen zu modellieren, während sie gleichzeitig versucht, die Dimensionen in Bezug auf die ursprünglichen Variablen interpretierbar zu machen. Es wird davon ausgegangen, dass die Daten einem Faktoren Modell entsprechen, bei der die beobachteten Korrelationen auf `latente` Faktoren zurückführen. Mit der EFA wird *nicht* die gesamte Varianz erklärt.  \n\n\nIn der Psychologie werden diese beiden Methoden oft in der Konstruktion von mehrstufigen Tests angewendet, um festzustellen, welche `Items` auf welche Konstrukte laden. Sie ergeben in der Regel ähnliche inhaltliche Schlussfolgerungen. Dies erklärt, warum einige Statistik-Software-Programme beide Methoden zusammenpacken. So wird die PCA als Standard-Extraktionsmethode in den SPSS-Faktoranalyse-Routinen verwendet. Dies führt zweifellos zu einer gewissen Verwirrung über die Unterscheidung zwischen den beiden Methoden. Die EFA wird oft als *Common Factor Analysis* oder *principal axis analysis (Hauptachsenanalyse)* bezeichnet\\index{Hauptachsenanalyse}. Die EFA verwendet eine Vielzahl von Optimierungsroutinen und das Ergebnis, im Gegensatz zu PCA, hängt von der verwendeten Optimierungsroutine und Ausgangspunkten für diese Routinen ab. Es gibt also *keine einzigartige* Lösung bei der EFA.\n\nEine einfache Faustregel für die Entscheidung zwischen diesen beiden Methoden:\n\n* Führe die PCA durch, wenn die korrelierten beobachteten Variablen einfach auf einen kleineren Satz von wichtigen unabhängigen zusammengesetzten Variablen reduziert werden soll. \n* Führe die EFA durch, wenn ein theoretisches Modell von latenten Faktoren zugrunde liegt, dass die beobachtete Variablen verursacht. \n\n\n## Gründe für die Notwendigkeit der Datenreduktion\n\n* *Dimensionen reduzieren*: Im technischen Sinne der Dimensionsreduktion können wir statt Variablen-Sets die Faktor-/ Komponentenwerte verwenden (z. B. für Mittelwertvergleiche zwischen Experimental- und Kontrollgruppe, Regressionsanalyse und Clusteranalyse).\n* *Unsicherheit verringern*: Wenn wir glauben, dass ein Konstrukt nicht eindeutig messbar ist, dann kann mit einem Variablen-Set die Unsicherheit reduziert werden. \n* *Aufwand verringern*: Wir können den Aufwand bei der Datenerfassung vereinfachen, indem wir uns auf Variablen konzentrieren, von denen bekannt ist, dass sie einen hohen Beitrag zum interessierenden Faktor/ Komponente leisten. Wenn wir feststellen, dass einige Variablen für einen Faktor nicht wichtig sind, können wir sie aus dem Datensatz eliminieren. Außerdem werden die statistischen Modelle einfacher, wenn wir statt vieler Ausgangsvariablen einige wenige Komponenten/Faktoren als Eingabevariablen verwenden.\n\n\n## Intuition zur Dimensionsreduktion\n\nBetrachten Sie die die Visualisierung eines Datensatzes mit 3 Dimensionen (Spalten) in Abbildung \\@ref(fig:fig-scatter3d)). Man braucht nicht viel Phantasie, um einen Pfeil (Vektor) in der Punktewolke zu sehen. Um jeden Punkt einigermaßen genau zu bestimmen, reicht es, seine \"Pfeil-Koordinate\" zu wissen. Praktischerweise geben in Abbildung \\@ref(fig:fig-scatter3d) die Farben (in etwa) die Koordinaten auf dem Pfeil an^[genau genommen ist hier die Regressionsgerade gezeichnet, es müsste aber der größte Eigenvektor sein. Geschenkt.]. Damit können wir die Anzahl der Variablen (Dimensionen), die es braucht, um einen Punkt zu beschreiben von 3 auf 1 reduzieren; 2/3 der Komplexität eingespart. Wir verlieren etwas Genauigkeit, aber nicht viel. Dieser Pfeil, der mitten durch den Punkteschwarm geht, nennt man auch die 1. Hauptkomponente.\n\n```{r fig-scatter3d, echo = FALSE, fig.cap = \"Der Pfeil ist eindimensional; reduziert also die drei Dimensionen auf eine\"}\n\nlibrary(MASS)\nlibrary(plot3D)\n\n\nmu3d <- c(0, 0,0 )\nsigma3d <- c(17, 16, 16, 16, 17, 14, 16, 14, 17) %>% matrix(nrow = 3)\n\n\n\ncorvars3d <- MASS::mvrnorm(n=100, mu=mu3d, Sigma=sigma3d) %>% as_tibble\n\n\nlm3d <- lm(V3 ~ V1+V2, data = corvars3d)\n\n\n\n\n\nadd_3dline <- function(){\n  \n  arrows3D(x0 =  -10, y0 = -10 , z0 = -10, \n           x1 = 7, y1 = 7, z1 = 7*1.31+7*-.41,\n           add = TRUE)\n}\n\n\n\nop <- par(mfrow = c(2,2),\n          oma = c(5,4,0,0) + 0.1,\n          mar = c(0,0,1,1) + 0.1)\n\nscatter3D(corvars3d$V1, corvars3d$V2, corvars3d$V2, corvars3d$V3, theta = 15, phi = 20)\nadd_3dline()\n\nscatter3D(corvars3d$V1, corvars3d$V2, corvars3d$V2, corvars3d$V3, theta = 15, phi = 20)\nadd_3dline()\n\nscatter3D(corvars3d$V1, corvars3d$V2, corvars3d$V2, corvars3d$V3, theta = 190, phi = 20)\nadd_3dline()\n\nscatter3D(corvars3d$V1, corvars3d$V2, corvars3d$V2, corvars3d$V3, theta = 100, phi = 60)\nadd_3dline()\n\npar(op)\n\n\n```\n\n\nBeachten Sie, dass hoch korrelierte Variablen eng an der Regressionsgeraden liegen; entsprechend sind in Abbildung \\@ref(fig:ig-scatter3d) die drei Variablen stark korreliert. Sehen Sie auch, dass die Hauptkomponente Varianz erklärt: Jede Variable für sich genommen, hat recht viel Streuung. Die Streuung der Punkte zur Hauptkomponente ist aber relativ gering. Daher sagt man, die Streuung (Varianz) wurde reduziert durch die Hauptkomponente.\n\n\n>   Der längste Vektor, den man in die Punktewolke legen kann, bezeichnet man als den 1. Eigenvektor oder die 1. Hauptkomponente.\n\nIn Abbildung \\@ref(fig:fig-scatter3d) ist dieser als Pfeil eingezeichnet^[die Hauptkomponente ist hier ähnlich zur Regressionslinie, aber nicht identisch]. Weitere Hauptkomponenten kann man nach dem gleichen Muster bestimmen mit der Auflage, dass sie im rechten Winkel zu bestehenden Hauptkomponenten liegen. Damit kann man in einer 3D-Raum nicht mehr als 3 Hauptkomponenten bestehen (in einem $n$-dimensionalen Raum also maximal $n$ Hauptkomponenten). \n\n\n\n\n```{r echo = FALSE}\ncor(corvars3d)\n```\n\n>   Je stärker die Korrelation zwischen Variablen, desto besser kann man sie zusammenfassen. \n\n\n## Daten\n\nWir untersuchen die Dimensionalität mittels einer auf 1000 Fälle reduzierten Zufallsauswahl von 15 Variablen zur Messung der grundlegenden Wertorientierungen von Menschen. Die Daten wurden im Sommersemester 2017 von FOM Studierenden im ersten Semester an der FOM bundesweit erhoben. Die Variablen zu Wertorientierungen wurden ursprüngliche aus dem 40-Item-Set des Portraits Value Questionnaire» (PVQ) von @Schmidt2007 adaptiert und durch Studien an der FOM seit 2014 stufenweise bis auf 15 relevante Variablen reduziert. Alle Variablen wurden auf einer Skala von 1 bis 7 (wobei 1 am wenigsten und 7 am meisten zutrifft) abgefragt. \n\nDas Einlesen der Daten erfolgt mit dem Befehl read.csv2.\n```{r}\nWerte <- read.csv2(\"data/Werte.csv\")\n```\n\n\nWir überprüfen zuerst die Struktur des Datensatzes, die ersten 6 Zeilen und die Zusammenfassung. Probieren Sie die folgenden Befehle aus:\n\n```{r eval = FALSE}\nglimpse(Werte)\n```\n\nWir sehen mit `glimpse`, dass die Bereiche der Bewertungen für jede Variable 1-7 sind. Außerdem sehen wir, dass die Bewertungen als numerisch (Integer, also ganzzahlig) eingelesen wurden. Die Daten sind somit offenbar richtig fo rmatiert.\n\n## Neuskalierung der Daten \n\nIn vielen Fällen ist es sinnvoll, Rohdaten neu zu skalieren - auch bei der Dimensionsreduktion. Warum ist das nötig? \n\n\nDies wird üblicherweise als *Standardisierung*, *Normierung*, oder *Z-Transformation* bezeichnet. Als Ergebnis ist der Mittelwert aller Variablen über alle Beobachtungen dann 0 und die Standardabweichung (SD) 1. Da wir hier gleiche Skalenstufen haben, ist ein Skalieren nicht unbedingt notwendig, wir führen es aber trotzdem durch. \n\nEin einfacher Weg, alle Variablen im Datensatz auf einmal zu skalieren ist der Befehl `scale()`. Da wir die Rohdaten nie ändern wollen, weisen wir die Rohwerte zuerst einem neuen Dataframe `Werte.sc` zu und skalieren anschließend die Daten. Wir skalieren in unserem Datensatz alle Variablen.\n\n\n\n\n\n```{r show-z-scaled, results = \"hide\"}\nWerte.sc <- Werte %>% scale %>% as_tibble\nsummary(Werte.sc)\n```\n\n\n```{block2, qplot-syntax, type='rmdpseudocode', echo = TRUE}\n\n`<-`: Das Objekt `Werte.sc` soll wie folgt definiert sein  \nNimm das Objekt (ein Dataframe) `Werte` UND DANN \nz-skaliere das Objekt UND DANN  \ndefiniere es als Dataframe (genauer: tibble). FERTIG.  \n\nAch ja, dann zeig noch ein `summary` von diesem Objekt.\n\n\n```\n\n\nDie Daten wurden richtig skaliert, da der Mittelwert aller Variablen über alle Beobachtungen 0 und die sd 1 ist. \n\n## Zusammenhänge in den Daten\n\nWir verwenden den Befehl `corrplot()` für die Erstinspektion von bivariaten Beziehungen zwischen den Variablen. Das Argument `order = \"hclust\"` ordnet die Zeilen und Spalten entsprechend der Ähnlichkeit der Variablen in einer hierarchischen Cluster-Lösung der Variablen (mehr dazu im Kapitel \\@ref(cluster)) neu an.\n\n```{r}\ncorrplot(cor(Werte.sc), order = \"hclust\")\n```\n\nDie Visualisierung der Korrelation der Variablen scheint fünf Cluster zu zeigen:\n\n* (\"W1\", \"W3\", \"W4\")\n* (\"W12\", \"W13\", \"W14\", \"W15\")\n* (\"W16\", \"W17\", \"W18\")\n* (\"W6\", \"W7\")\n* (\"W9\", \"W10\", \"W11\")\n\n## Daten mit fehlende Werten\n\nWenn in den Daten leere Zellen, also fehlende Werte, vorhanden sind, dann kann es bei bestimmten Rechenoperationen zu Fehlermeldungen kommen. Dies betrifft zum Beispiel Korrelationen, PCA und EFA. Der Ansatz besteht deshalb darin, NA-Werte explizit zu entfernen. Dies kann am einfachsten mit dem Befehl `na.omit()` geschehen:\n\nBeispiel: \n```{r, eval=FALSE}\n\nWerte.sc <- na.omit(Werte.sc)\n\ncorrplot(cor(Werte.sc), order = \"hclust\")\n```\n\nDa wir in unserem Datensatz vollständige Daten verwenden, gibt es auch keine Leerzellen. \n\nMit dem Parameter `order` kann man die Reihenfolger (order) der Variablen, wie sie im Diagramm dargestellt werden ändern (vgl `help(corrplot)`). Hier haben wir die Variablen nach Ähnlichkeit aufgereiht: Ähnliche Variablen stehen näher beieinander. Damit können wir gut erkennen, welche Variablen sich ähnlich sind (hoch korreliert sind) und somit Kandidaten für eine Einsparung (Zusammenfassung zu einer Hauptkomponente bzw. einem Faktor) sind.\n\n\n\n\n## Hauptkomponentenanalyse (PCA)\n\nDie PCA berechnet ein Variablenset (Komponenten) in Form von linearen Gleichungen, die die linearen Beziehungen in den Daten erfassen. Die erste Komponente erfasst so viel Streuung (Varianz) wie möglich von allen Variablen als eine einzige lineare Funktion. Die zweite Komponente erfasst unkorreliert zur ersten Komponente so viel Streuung wie möglich, die nach der ersten Komponente verbleibt. Das geht so lange weiter, bis es so viele Komponenten gibt wie Variablen. \n\n### Bestimmung der Anzahl der Hauptkomponenten\n\nBetrachten wir in einem ersten Schritt die wichtigsten Komponenten für die Werte. Wir finden die Komponenten mit prcomp().\n```{r}\nWerte.pc <- prcomp(Werte.sc)  # Principal Components berechnen\nsummary(Werte.pc)\n\n```\n\n```{r}\n# Berechnung der Gesamtvarianz\nGesamtvarianz <- sum(Werte.pc$sdev^2)\n\n# Bei sum(Werte.pc$sdev^2) wird die Summe aller 15 Standardabweichungen berechnet.\n\n# Varianzanteil der ersten Hauptkomponente\nWerte.pc$sdev[1]^2 / Gesamtvarianz\n```\n\n\n### Scree-Plot\n\nDer Standard-Plot `plot()` für die PCA ist ein *Scree-Plot*^[scree: engl. \"Geröll\"], Dieser zeigt uns in Reihenfolge der Hauptkomponenten jeweils die durch diese Hauptkomponente erfasste Streuung (Varianz). Wir plotten ein Liniendiagramm mit dem Argument `type = \"l\"` (`l` für Linie), s. Abb. \\@ref(fig:pca-scree)).\n\n```{r pca-scree, fig.cap = \"Screeplot\"}\nplot(Werte.pc, type=\"l\")\n```\n\n\nWir sehen in Abb. \\@ref(fig:pca-scree), dass bei den Werte-Daten der Anteil der Streuung nach der fünften Komponente nicht mehr wesentlich abnimmt. Es soll die Stelle gefunden werden, ab der die Varianzen der Hauptkomponenten deutlich kleiner sind. Je kleiner die Varianzen, desto weniger Streuung erklärt diese Hauptkomponente. \n\n### Ellbogen-Kriterium\n\nNach dem *Ellbogen-Kriterium*\\index{Ellbogen-Kriterium} werden alle Hauptkomponenten berücksichtigt, die links von der Knickstelle im Scree-Plot liegen. Gibt es mehrere Knicks, dann werden jene Hauptkomponenten ausgewählt, die links vom rechtesten Knick liegen. Gibt es keinen Knick, dann hilft der Scree-Plot nicht weiter. Bei den Werte-Daten tritt der Ellbogen, je nach Betrachtungsweise, entweder bei vier oder sechs Komponenten auf. Dies deutet darauf hin, dass die ersten fünf Komponenten die meiste Streuung in den Werte-Daten erklären. \n\n### Eigenwert-Kriterium\n\nDer *Eigenwert*\\index{Eigenwert} ist eine Metrik für den Anteil der erklärten Varianz pro Hauptkomponente. Die Anzahl Eigenwerte können wir über den Befehl `eigen()` ausgeben.   \n\n```{r show-eigenvalues, results = \"hide\"}\neigen(cor(Werte))\n```\n\nDer Eigenwert einer Komponente/ eines Faktors sagt aus, wie viel Varianz dieser Faktor an der Gesamtvarianz aufklärt. Laut dem Eigenwert-Kriterium sollen nur Faktoren mit einem *Eigenwert größer 1* extrahiert werden. Dies sind bei den Werte-Daten fünf Komponenten/ Faktoren, da fünf Eigenwerte größer 1 sind. Der Grund ist, dass Komponenten/ Faktoren mit einem Eigenwert kleiner als 1 weniger Erklärungswert haben als die ursprünglichen Variablen. \n\nDies kann auch grafisch mit dem `psych::VSS.Scree`^[das Paket `psych` wird automatisch vom Paket `nfactors` gestartet, sie müssen es nicht extra starten] geplottet werden (s. Abb. \\@ref(fig:vss-scree)). \n\n```{r vss-scree, fig.cap = \"VSS-Screeplot\"}\nVSS.scree(Werte)\n```\n\n\n### Biplot\n\nEine gute Möglichkeit die Ergebnisse der PCA zu analysieren, besteht darin, die ersten Komponenten zuzuordnen, die es uns ermöglichen, die Daten in einem niedrigdimensionalen Raum zu visualisieren. Eine gemeinsame Visualisierung ist ein *Biplot*\\index{Biplot}. Ein Biplot zeigt die Ausprägungen der Fälle auf den ersten beiden Hauptkomponenten. Häufig sind die beiden ersten Hauptkomponenten schon recht aussagekräftig, vereinen also einen Gutteil der Streuung auf sich. Dazu verwenden wir `biplot()` (s. Abbildung \\@ref(fig:fig-biplot))\n\n```{r fig-biplot, fig.cap = \"Ein Biplot für den Werte-Datensatz\"}\nbiplot(Werte.pc)\n```\n\nDie einzelnen Ausgangsvariablen sind in Abbildung Abbildung \\@ref(fig:fig-biplot) durch rote Pfeile (Vektoren) gekennzeichnet. \n\n>   Je paralleler der Vektor einer Ausgangsvariable zur X-Achse (1. Hauptkomponente) ist, umso identischer sind sich die entsprechende Variable und die Hauptkomponente. Das hilft uns, die Hauptkomponente inhatlich zu interpretieren. Hauptkomponenten (oder Faktoren) sollten stets inhaltlich interpretiert werden - auch wenn eine subjektive Komponente mitschwingt. \n\nDie 1. Hauptkomponente wird offenbar stark geprägt duch die Ausgangsvariablen `W6`, `W7`, `W9` und `W11`. Die 2. Hauptkomponente primär durch `W18` und `W19`. \n\nZusätzlich erhalten wir einen Einblick in die Bewertungscluster (als dichte Bereiche von Beobachtungspunkten): Gruppen von Punkten entsprechen ähnlichen Fällen (ähnlich hinsichtlich ihrer Werte in den ersten zwei Hauptkomponenten). Der Biplot ist hier durch die große Anzahl an Beobachtung allerdings recht unübersichtlich. \n\n\n### Aufgaben\n\n```{block2, pca-ex, type='rmdexercises', echo = TRUE} \n\n1. Ziehen Sie eine Zufallsstichprobe aus dem Datensatz, berechnen Sie die PCA erneut und betrachten Sie den Biplot. Wie stark ist die Änderung?\n\n2. Erstellen Sie mehrere Streudiagramme und überprüfen Sie die bivariaten Zusammenhänge (die ja zur Dimensionsreduktion führen) visuell.\n\n```\n\nAm einfachsten lassen sich die Komponenten extrahieren mit dem `principal`-Befehl aus dem Paket `psych`:\n\n```{r}\nWerte.pca <- principal(Werte, nfactors = 5, rotate = \"none\")\nprint(Werte.pca, cut = 0.5, sort = TRUE, digits = 2)\n\n```\n\n`cut = 0.5` heißt, dass nur Ladungen ab 0.5 angezeigt werden sollen. Mit `rotate = 'none'` sagen wir, dass wir keine Rotation wünschen. Eine Rotation ist \n\n### Interpretation der Ergebnisse der PCA\n\nDas Ergebnis sieht sehr gut aus. Es laden immer mehrere Items (Ausgangsvariablen) (mindestens 2) hoch (> 0,5) auf einer Komponente (die mit RC1 bis RC5 bezeichnet werden, *RC* steht für *Rotated Component*). Mit \"laden\" ist die Parallelität der Ausgangsvariable zur Hauptkomponente gemeint. Vereinfacht gesprochen ist die Ladung die Korrelation der Items mit der jeweiligen Komponente.\n\n\nInnerhalb einer PCA kann die Interpretierbarkeit über eine **Rotation** erhöht werden. Wenn die Rotation nicht ausgeschlossen wird (mit dem Argument `rotate=\"none\"`), dann ist die Voreinstellung eine `Varimax-Rotation`.\n\nMit `h2` (Kommunalität) ist der Anteil eines Items bezeichnet, der durch die Komponenten insgesamt erklärt wird. Hier haben die Anzahl der Komponenten auf 5 beschränkt. Daher wird nicht die ganze Varianz des Items erklärt.\n\nEs gibt keine Items die auf mehr als einer Komponente hoch laden. Die Ladungen sind Korrelationskoeffizienten zwischen den Items und den Hauptkomponenten. In der Zeile *SS loadings* finden wir die Eigenwerte der fünf Hauptkomponenten (berechnet als Summe der quadrierten Ladungen). Den Anteil an der Gesamtvarianz, den sie erklären, findet man in der Zeile *Proportion Var*. Aufsummiert sind die Anteile in der Zeile *Cumlative Var*. Insgesamt werden durch die fünf Hauptkomponenten 64% der Gesamtvarianz erklärt. Die stärke Hauptkomponente hat einen Eigenwert von 2.08 und erklärt 14% der Varianz.\n\nEinzig das Item W15 lädt auf keine der Hauptkomponenten hoch. \n\nUm die inhaltliche Bedeutung der Komponenten zu interpretieren, schauen wir uns die Inhalte der jeweiligen Items an und versuchen hierfür einen inhaltlichen Gesamtbegriff zu finden. Die Erste Komponenten könnte mit **Genuss**, die zweite mit **Sicherheit**, die dritte mit **Bewusstsein**, die vierte mit **Konformismus** und die fünfte mit **Anerkennung** bezeichnet werden. \n\n| Item | Inhalt des Items                                                        |\n|------|-------------------------------------------------------------------------|\n| W1:  | Spaß haben und Dinge tun, die Freude bereiten.                          |\n| W3:  | Freuden des Lebens genießen und sich selbst verwöhnen.                  |\n| W4:  | Überraschungen mögen und aufregendes Leben führen.                      |\n| W12: | Im sicheren Umfeld leben und Gefahren meiden.                           |\n| W13: | Interne und externe Sicherheit im Land.                                 |\n| W14: | Wertschätzen von Ordentlichkeit, Sauberkeit und ablehnen von Unordnung. |\n| W16: | Andersartigen Menschen zuhören und Meinung verstehen.                   |\n| W17: | Für die Natur einsetzen und um die Umwelt kümmern.                      |\n| W18: | Interessieren, neugierig sein und versuchen Dinge verstehen.            |\n| W9:  | Religiös sein und auch danach leben.                                    |\n| W10: | Eltern und ältere Menschen respektieren und gehorsam sein.              |\n| W11: | Demütig und bescheiden sein, keine Aufmerksamkeit anziehen.             |\n| W6:  | Führung übernehmen.                                                     |\n| W7:  | Entscheidungen treffen.                                                 |\n\n\nMit der Funktion `fa.diagram` kann das Ergebnis auch grafisch dargestellt werden.\n\n```{r}\nfa.diagram(Werte.pca)\n```\n\n\n\n\n## Exploratorische Faktorenanalyse (EFA)\n\nGenau genommen ist der Begriff *Faktorenanalyse (FA)*\\index{Faktorenanalyse} ein Überbegriff für mehrere Arten von ähnlichen Verfahren der Dimensionsreduktion. Ein Beispiel für eine Art von Faktorenanalyse wäre dann die PCA. Aber der Begriff Faktorenanalyse wird auch verwendet, um eine bestimmte Art von Faktorenanalyse - sozusagen eine Faktorenanalyse im engeren Sinne - zu bezeichnen. Wir halten uns hier an letztere Begriffskonvention.\n\nIn diesem Sinne ist die *Exploratorische Faktorenanalyse (EFA)*\\index{Exploratorische Faktorenanalyse} ist eine Methode, um die Beziehung von Konstrukten (Konzepten), d. h. Faktoren zu Variablen zu beurteilen. Dabei werden die Faktoren als *latente Variablen* betrachtet, die nicht direkt beobachtet werden können. Stattdessen werden sie empirisch durch mehrere Variablen beobachtet, von denen jede ein Indikator der zugrundeliegenden Faktoren ist. Diese beobachteten Werte werden als *manifeste Variablen* bezeichnet und umfassen Indikatoren. Die EFA versucht den Grad zu bestimmen, in dem Faktoren die beobachtete Streuung der manifesten Variablen berücksichtigen.\n\nDas Ergebnis der EFA ist ähnlich zur PCA: eine Matrix von Faktoren (ähnlich zu den PCA-Komponenten) und ihre Beziehung zu den ursprünglichen Variablen (Ladung der Faktoren auf die Variablen). Im Gegensatz zur PCA versucht die EFA, Lösungen zu finden, die in den *manifesten variablen maximal interpretierbar* sind. Im Allgemeinen versucht sie, Lösungen zu finden, bei denen eine kleine Anzahl von Ladungen für jeden Faktor sehr hoch ist, während andere Ladungen für diesen Faktor gering sind. Wenn dies möglich ist, kann dieser Faktor mit diesem Variablen-Set interpretiert werden. \n\n\n### Finden einer EFA Lösung\n\nAls erstes muss die Anzahl der zu schätzenden Faktoren bestimmt werden. Hierzu verwenden wir wieder das Ellbow-Kriterium und das Eigenwert-Kriterium. Beide Kriterien haben wir schon bei der PCA verwendet, dabei kommen wir auf 5 Faktoren. \n\nDurch das Paket `nFactors` bekommen wir eine ausgefuchstere Berechnung der Scree-Plot Lösung mit dem Befehl `nScree()` - es werden noch weitere, sophistiziertere Methoden zur Berechnung der 'richtigen' Anzahl von Faktoren eingesetzt. Wir sparen uns hier die Details.\n\n```{r}\nnScree(Werte)\n\n```\n\n`nScree` gibt vier methodische Schätzungen für die Anzahl an Faktoren durch den Scree-Plot aus. Wir sehen, dass drei von vier Methoden fünf Faktoren vorschlagen. Nach kurzer Überlegung und Blick aus dem Fenster entscheiden wir uns für 5 Faktoren.\n\n\n### Schätzung der EFA\n\nEine EFA wird geschätzt mit dem Befehl `factanal(x,factors = k)`, wobei `k` die Anzahl Faktoren angibt und `x` den Datensatz.\n\n```{r werte-factanal, results = \"hide\"}\nWerte.fa<-factanal(Werte, factors = 5)\nWerte.fa\n```\n\nEine übersichtlichere Ausgabe bekommen wir mit dem `print` Befehl, in dem wir zusätzlich noch die Dezimalstellen kürzen mit `digits = 2`, alle Ladungen kleiner als 0,5 ausblenden mit `cutoff = .4` und die Ladungen mit `sort = TRUE` so sortieren, dass die Ladungen, die auf einen Faktor laden, untereinander stehen.\n```{r out.width = \"100%\", eval = FALSE}\nprint(Werte.fa, digits = 2, cutoff = .4, sort = TRUE)\n```\n\n\nStandardmäßig wird bei `factanal()` eine *Varimax-Rotation* durchgeführt (das Koordinatensystem der Faktoren wird so rotiert, das eine optimale Zuordnung zu den Variablen erfolgt). Bei Varimax gibt es keine Korrelationen zwischen den Faktoren. Sollen Korrelationen zwischen den Faktoren zugelassen werden, empfiehlt sich die Oblimin-Rotation mit dem Argument `rotation=\"oblimin\"` aus dem Paket `GPArotation`.\n\nDas eine Rotation sinnvoll ist, kann man sich am einfachsten an einem Diagramm verdeutlichen (s. Abbildung \\@ref(fig:rotation), [@fjalnes_orthogonale_2014]).\n\n\n```{r rotation, echo = FALSE, fig.cap = \"Beispiel für eine rechtwinklige Rotation\"}\n\nknitr::include_graphics(\"images/dimred/rotation.png\")\n\n```\n\nDas Rotieren kann man sich als Drehen des Koordinatensystems vorstellen. Durch die Rotation sind die Items 'näher' an den Faktoren: Die Faktorladung zu einem Faktor wurde größer, zum anderen Faktor hingegen geringer. Damit wurde die Ladung, also die Zuordnung der Items zu den Faktoren, insgesamt klarer, besser. Das wollen wir. Übrigens: Der Winkel der Achsen ist beim Rotieren gleich (rechtwinklig, orthogonoal) geblieben. Daher spricht man von einer rechtwinkligen oder orthogonalen Rotation. Man kann auch die Achsen unterschiedlich rotieren, so dass sie nicht mehr rechtwinklig sind. Das könnte die Ladung noch klarer machen, führt aber dazu, dass die Faktoren dann korreliert sind. Korrelierte Faktoren sind oft nicht wünschenswert, weil ähnlich.\n\n\n\n### Vertiefung: Heatmap mit Ladungen\n\nIn der obigen Ausgabe werden die Item-to-Faktor-Ladungen angezeigt. Im zurückgegebenen Objekt `Werte.fa` sind diese als  `$loadings` vorhanden. Wir können die Item-Faktor-Beziehungen mit einer Heatmap  von `$loadings` visualisieren aus dem Paket `gplots`^[bereits automatisch geladen], s. Abb. \\@ref(fig:efa-heatmap):\n\n```{r efa-heatmap, fig.cap = \"Heatmap einer EFA\"}\nheatmap.2(Werte.fa$loadings,\n          dendrogram = \"both\",\n          labRow = NULL,\n          labCol = NULL,\n          cexRow=1,\n          cexCol=1,\n          margins = c(7,7),\n          trace = \"none\",\n          #lmat = rbind(c(0,0),c(0,1)),\n          lhei = c(1,4),\n          keysize=0.75, \n          key.par = list(cex=0.5)\n          )\n```\n\n\nDas Ergebnis aus der Heatmap zeigt eine deutliche Trennung der Items in 5 Faktoren, die interpretierbar sind als *Anerkennung*, *Genuss*, *Sicherheit*, *Bewusstsein* und *Konformismus*. \n\n\n### Berechnung der Faktor-Scores\n\nZusätzlich zur Schätzung der Faktorstruktur kann die EFA auch die latenten Faktorwerte für jede Beobachtung schätzen. Die gängige Extraktionsmethode ist die Bartlett-Methode, worauf wir hir nicht weiter eingehen. Kurz gesagt: Jeder Fall (jede Zeile im Datensatz, jede Person) bekommt einen Wert pro Komponente bzw. Faktor, man spricht von Faktor-Scores oder Faktorwerten der Beobachtungen.\n\n\n```{r}\nWerte.ob <- factanal(Werte, factors = 5, scores = \"Bartlett\")\nWerte.scores <- data.frame(Werte.ob$scores)\nnames(Werte.scores) <- c(\"Anerkennung\", \"Genuss\", \"Sicherheit\", \"Bewusstsein\", \"Konformismus\") \nhead(Werte.scores)\n```\n\n\nWir haben nun anstatt der 15 Variablen 5 Faktoren mit Scores. Die Dimensionen wurden um ein Drittel reduziert. \n\n\n## Interne Konsistenz der Skalen\n\nDas einfachste Maß für die *interne Konsistenz*\\index{interne Konsistenz} ist die *Split-Half-Reliabilität*\\index{Split-Half-Reliabilität}. Die Items werden in zwei Hälften unterteilt und die resultierenden Scores sollten in ihren Kenngrößen ähnlich sein. Hohe Korrelationen zwischen den Hälften deuten auf eine hohe interne Konsistenz hin. Das Problem ist, dass die Ergebnisse davon abhängen, wie die Items aufgeteilt werden. Ein üblicher Ansatz zur Lösung dieses Problems besteht darin, den Koeffizienten *Alpha (Cronbachs Alpha)*\\index{Cronbachs Alpha} zu verwenden.\n\nDer Koeffizient *Alpha* ist der Mittelwert aller möglichen Split-Half-Koeffizienten, die sich aus verschiedenen Arten der Aufteilung der Items ergeben. Dieser Koeffizient variiert von 0 bis 1. Inhaltlich ist Alpha eine Art mittlere Korrelation, die sich ergibt wenn man alle Items (paarweise) miteinander korrliert: I1-I2, I1-I3,...\n\nFaustregeln für die Bewertung von Cronbachs Alpha:\n\nAlpha      |   Bedeutung    \n-----------|--------------\ngrößer 0,9 |   exzellent     \ngrößer 0,8 |   gut     \ngrößer 0,7 |   akzeptabel     \ngrößer 0,6 |   fragwürdig     \ngrößer 0,5 |   schlecht     \n\n\nWir bewerten nun die interne Konsistent der Items Beispielhaft für das Konstrukt `Sicherheit` und nehmen zur Demonstration das Item `W15` mit in die Analyse auf.\n```{r}\nWerte %>% \n  select(W12, W13, W14, W15) -> df\n\npsych::alpha(df, check.keys = TRUE)\n```\n\nBei dem Konstrukt `Sicherheit` können wir durch Elimination von `W15` das Cronbachs Alpha von 0,64 auf einen fast akzeptablen Wert von 0,68 erhöhen.\n\nDas Argument `check.keys=TRUE` gibt uns eine Warnung aus, sollte die Ladung eines oder mehrerer Items negativ sein. Dies ist hier nicht der Fall, somit müssen auch keine Items recodiert werden. \n\n\n## Befehlsübersicht\n\n\nTabelle \\@ref(tab:befehle-dimred) fasst die R-Funktionen dieses Kapitels zusammen.\n\n```{r befehle-dimred, echo = FALSE}\n\ndf <- readr::read_csv(\"includes/Befehle_dimred.csv\")\n\nknitr::kable(df,\n             caption = \"Befehle des Kapitels 'Dimensionsreduktion'\")\n```\n",
    "created" : 1497008805995.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2160035300",
    "id" : "73D596DA",
    "lastKnownWriteTime" : 1497022672,
    "last_content_update" : 1497022672540,
    "path" : "~/Documents/Publikationen/In_Arbeit/Praxis_der_Datenanalyse/083_Dimensionsreduktion.Rmd",
    "project_path" : "083_Dimensionsreduktion.Rmd",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}