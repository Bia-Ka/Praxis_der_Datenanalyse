# returns histogram of simulated samples
# arguments:
# n_stipros: number of samples to be simulated
# mean: mean of distribution
# sd: sd of distribtuion
# distribution: type of distribution. Either "normal" (default) or "uniform"
stopifnot(distribution %in% c("normal", "uniform"))
if (distribution == "normal") {
result <- replicate(n_stipros, mean(rnorm(n = n, mean = mean, sd = sd)))
hist(result, main = "Histogramm zu Stichproben \naus einer Normalverteilung")
}
if (distribution == "uniform") {
result <- replicate(n_stipros, mean(runif(n = n, min=0, max=1)))
hist(result, main = "Histogramm zu Stichproben \naus einer Gleichverteilung")
}
}  # end stipros
# function "simu_p" ------------------------------------------------------------
simu_p <- function(n_samples = 1000, mean = 100, sd = 15, n = 30, distribution = "normal", sample_mean = 107){
# returns: histogram of simulated samples including shaded area under the curve according to p-value as per simulation
# arguments:
# n_stipros: number of samples to be simulated
# mean: mean of distribution
# sd: sd of distribtuion
# distribution: type of distribution. Either "normal" (default) or "uniform"
# sample_mena: mean of sample
if (!"ggplot2" %in% rownames(installed.packages())) stop("ggplot2 is not installed")
if (!"dplyr" %in% rownames(installed.packages())) stop("dplyr is not installed")
library(ggplot2)
library(dplyr)
if (distribution == "normal") {
samples <- replicate(n_samples, mean(rnorm(n = n, mean = mean, sd = sd)))
df <- data.frame(samples = samples)
df %>%
mutate(perc_num = percent_rank(samples),
max_5perc = ifelse(perc_num > (trunc(.95*n)), 1, 0),
greater_than_sample = ifelse(samples > sample_mean, 1, 0)) -> df
p_value <- round(mean(df$greater_than_sample), 3)
p <- ggplot(df) +
aes(x = samples) +
geom_histogram() +
labs(title = paste("Histogram of ", n_samples, " samples", "\n from a normal distribution", sep = ""),
caption = paste("mean-pop=", mean, ", sd-pop=",sd, sep = "", ", mean in sample=", sample_mean),
x = "sample means") +
geom_histogram(data = dplyr::filter(df, perc_num > .95), fill = "red") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = sample_mean, linetype = "dashed", color = "grey40") +
ggplot2::annotate("text", x = Inf, y = Inf, label = paste("p =",p_value), hjust = 1, vjust = 1)
print(p)
}
if (distribution == "uniform") {
samples <- replicate(n_samples, mean(runif(n = n, min=0, max=1)))
df <- data.frame(samples = samples)
if (sample_mean > 1) sample_mean <- .99
df %>%
mutate(perc_num = percent_rank(samples),
max_5perc = ifelse(perc_num > (trunc(.95*n)), 1, 0),
greater_than_sample = ifelse(samples > sample_mean, 1, 0)) -> df
p_value <- round(mean(df$greater_than_sample), 3)
p <- ggplot(df) +
aes(x = samples) +
geom_histogram() +
labs(title = paste("Histogram of ", n_samples, " samples", "\n from a uniform distribution", sep = ""),
caption = paste("sample mean =", sample_mean, ", min-pop = 0, max-pop = 1"),
x = "sample means") +
geom_histogram(data = dplyr::filter(df, perc_num > .95), fill = "red") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = sample_mean, linetype = "dashed", color = "grey40") +
ggplot2::annotate("text", x = Inf, y = Inf, label = paste("p =",p_value), hjust = 1, vjust = 1)
print(p)
}
return(df)
} # end simu_p
simu_p()
# R code by Norman Markgraf and Sebastian Sauer
# function stipros -------------------------------------------------------------
stipros <- function(n_stipros = 1000, mean = 100, sd = 15, n = 30, distribution = "normal"){
# returns histogram of simulated samples
# arguments:
# n_stipros: number of samples to be simulated
# mean: mean of distribution
# sd: sd of distribtuion
# distribution: type of distribution. Either "normal" (default) or "uniform"
stopifnot(distribution %in% c("normal", "uniform"))
if (distribution == "normal") {
result <- replicate(n_stipros, mean(rnorm(n = n, mean = mean, sd = sd)))
hist(result, main = "Histogramm zu Stichproben \naus einer Normalverteilung")
}
if (distribution == "uniform") {
result <- replicate(n_stipros, mean(runif(n = n, min=0, max=1)))
hist(result, main = "Histogramm zu Stichproben \naus einer Gleichverteilung")
}
}  # end stipros
# function "simu_p" ------------------------------------------------------------
simu_p <- function(n_samples = 1000, mean = 100, sd = 15, n = 30, distribution = "normal", sample_mean = 107){
# returns: histogram of simulated samples including shaded area under the curve according to p-value as per simulation
# arguments:
# n_stipros: number of samples to be simulated
# mean: mean of distribution
# sd: sd of distribtuion
# distribution: type of distribution. Either "normal" (default) or "uniform"
# sample_mena: mean of sample
if (!"ggplot2" %in% rownames(installed.packages())) stop("ggplot2 is not installed")
if (!"dplyr" %in% rownames(installed.packages())) stop("dplyr is not installed")
library(ggplot2)
library(dplyr)
if (distribution == "normal") {
samples <- replicate(n_samples, mean(rnorm(n = n, mean = mean, sd = sd)))
df <- data.frame(samples = samples)
df %>%
mutate(perc_num = percent_rank(samples),
max_5perc = ifelse(perc_num > (trunc(.95*n)), 1, 0),
greater_than_sample = ifelse(samples > sample_mean, 1, 0)) -> df
p_value <- round(mean(df$greater_than_sample), 3)
p <- ggplot(df) +
aes(x = samples) +
geom_histogram() +
labs(title = paste("Histogram of ", n_samples, " samples", "\n from a normal distribution", sep = ""),
caption = paste("mean-pop=", mean, ", sd-pop=",sd, sep = "", ", mean in sample=", sample_mean),
x = "sample means") +
geom_histogram(data = dplyr::filter(df, perc_num > .95), fill = "red") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = sample_mean, linetype = "dashed", color = "grey40") +
ggplot2::annotate("text", x = Inf, y = Inf, label = paste("p =",p_value), hjust = 1, vjust = 1)
print(p)
}
if (distribution == "uniform") {
samples <- replicate(n_samples, mean(runif(n = n, min=0, max=1)))
df <- data.frame(samples = samples)
if (sample_mean > 1) sample_mean <- .99
df %>%
mutate(perc_num = percent_rank(samples),
max_5perc = ifelse(perc_num > (trunc(.95*n)), 1, 0),
greater_than_sample = ifelse(samples > sample_mean, 1, 0)) -> df
p_value <- round(mean(df$greater_than_sample), 3)
p <- ggplot(df) +
aes(x = samples) +
geom_histogram() +
labs(title = paste("Histogram of ", n_samples, " samples", "\n from a uniform distribution", sep = ""),
caption = paste("sample mean =", sample_mean, ", min-pop = 0, max-pop = 1"),
x = "sample means") +
geom_histogram(data = dplyr::filter(df, perc_num > .95), fill = "red") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = sample_mean, linetype = "dashed", color = "grey40") +
ggplot2::annotate("text", x = Inf, y = Inf, label = paste("p =",p_value), hjust = 1, vjust = 1)
print(p)
}
# return(df)
} # end simu_p
simu_p()
simu_p(n = 1200)
simu_p(n = 1000)
trunc(.95*1000)
debug(simu_p)
simu_p()
p
simu_p(n = 12000)
sum(df$max_5perc)
trunc(.95*n)
trunc(.95*n)/n
# R code by Norman Markgraf and Sebastian Sauer
# function stipros -------------------------------------------------------------
stipros <- function(n_stipros = 1000, mean = 100, sd = 15, n = 30, distribution = "normal"){
# returns histogram of simulated samples
# arguments:
# n_stipros: number of samples to be simulated
# mean: mean of distribution
# sd: sd of distribtuion
# distribution: type of distribution. Either "normal" (default) or "uniform"
stopifnot(distribution %in% c("normal", "uniform"))
if (distribution == "normal") {
result <- replicate(n_stipros, mean(rnorm(n = n, mean = mean, sd = sd)))
hist(result, main = "Histogramm zu Stichproben \naus einer Normalverteilung")
}
if (distribution == "uniform") {
result <- replicate(n_stipros, mean(runif(n = n, min=0, max=1)))
hist(result, main = "Histogramm zu Stichproben \naus einer Gleichverteilung")
}
}  # end stipros
# function "simu_p" ------------------------------------------------------------
simu_p <- function(n_samples = 1000, mean = 100, sd = 15, n = 30, distribution = "normal", sample_mean = 107){
# returns: histogram of simulated samples including shaded area under the curve according to p-value as per simulation
# arguments:
# n_stipros: number of samples to be simulated
# mean: mean of distribution
# sd: sd of distribtuion
# distribution: type of distribution. Either "normal" (default) or "uniform"
# sample_mena: mean of sample
if (!"ggplot2" %in% rownames(installed.packages())) stop("ggplot2 is not installed")
if (!"dplyr" %in% rownames(installed.packages())) stop("dplyr is not installed")
library(ggplot2)
library(dplyr)
if (distribution == "normal") {
samples <- replicate(n_samples, mean(rnorm(n = n, mean = mean, sd = sd)))
df <- data.frame(samples = samples)
df %>%
mutate(perc_num = percent_rank(samples),
max_5perc = ifelse(perc_num > (trunc(.95*n)/n), 1, 0),
greater_than_sample = ifelse(samples > sample_mean, 1, 0)) -> df
p_value <- round(mean(df$greater_than_sample), 3)
p <- ggplot(df) +
aes(x = samples) +
geom_histogram() +
labs(title = paste("Histogram of ", n_samples, " samples", "\n from a normal distribution", sep = ""),
caption = paste("mean-pop=", mean, ", sd-pop=",sd, sep = "", ", mean in sample=", sample_mean),
x = "sample means") +
geom_histogram(data = dplyr::filter(df, perc_num > .95), fill = "red") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = sample_mean, linetype = "dashed", color = "grey40") +
ggplot2::annotate("text", x = Inf, y = Inf, label = paste("p =",p_value), hjust = 1, vjust = 1)
print(p)
}
if (distribution == "uniform") {
samples <- replicate(n_samples, mean(runif(n = n, min=0, max=1)))
df <- data.frame(samples = samples)
if (sample_mean > 1) sample_mean <- .99
df %>%
mutate(perc_num = percent_rank(samples),
max_5perc = ifelse(perc_num > (trunc(.95*n)/n), 1, 0),
greater_than_sample = ifelse(samples > sample_mean, 1, 0)) -> df
p_value <- round(mean(df$greater_than_sample), 3)
p <- ggplot(df) +
aes(x = samples) +
geom_histogram() +
labs(title = paste("Histogram of ", n_samples, " samples", "\n from a uniform distribution", sep = ""),
caption = paste("sample mean =", sample_mean, ", min-pop = 0, max-pop = 1"),
x = "sample means") +
geom_histogram(data = dplyr::filter(df, perc_num > .95), fill = "red") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = sample_mean, linetype = "dashed", color = "grey40") +
ggplot2::annotate("text", x = Inf, y = Inf, label = paste("p =",p_value), hjust = 1, vjust = 1)
print(p)
}
# return(df)
} # end simu_p
debug(simu_p)
simu_p(n = 12000)
simu_p(n = 1000)
simu_p()
debug(simu_p)
simu_p(n = 1000)
simu_p(n = 1000)
sum(df$greater_than_sample)
sum(df$greater_than_sample, na.rm = TRUE)
View(df)
sd(df$samples)
hist(df$samples)
stipros()
stipros <- function(n_stipros = 1000, mean = 100, sd = 15, n = 30, distribution = "normal"){
main_title = "Histogramm zu Stichproben \naus einer"
if (distribution == "normal") {
result <- replicate(n_stipros, mean(rnorm(n = n, mean = mean, sd = sd)))
main_title = paste(main_title, "Normalverteilung")
}
if (distribution == "uniform") {
result <- replicate(n_stipros, mean(runif(n = n, min=0, max=1)))
main_title = paste(main_title, "Gleichverteilung")
}
hist(result, main = main_title)
}
simu_p <- function(n_samples = 1000, mean = 100, sd = 15, n = 30, distribution = "normal", sample_mean = 107, alpha= 0.05){
perc = 1-alpha
library(ggplot2)
library(dplyr)
if (distribution == "normal") {
samples <- replicate(n_samples, mean(rnorm(n = n, mean = mean, sd = sd)))
title_text = "normal distribution"
}
if (distribution == "uniform") {
samples <- replicate(n_samples, mean(runif(n = n, min=0, max=1)))
title_text = "uniform distribution"
}
df <- data.frame(samples = samples)
df %>%
mutate(perc_num = percent_rank(samples),
max_5perc = ifelse(perc_num > perc*n_samples, 1, 0),
greater_than_sample = ifelse(samples > sample_mean, 1, 0)) -> df
p_value <- round(mean(df$greater_than_sample), 3)
p <- ggplot(df) +
aes(x = samples) +
geom_histogram() +
labs(title = paste("Histogram of ", n_samples, " samples", "\n from a ", title_text , sep = ""),
caption = paste("mean-pop=", mean, ", sd-pop=",sd, sep = "", ", mean in sample=", sample_mean),
x = "sample means") +
geom_histogram(data = dplyr::filter(df, perc_num > perc), fill = "red") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = sample_mean, linetype = "dashed", color = "grey40") +
ggplot2::annotate("text", x = Inf, y = Inf, label = paste("p =",p_value), hjust = 1, vjust = 1)
print(p)
return(df)
}
simu_p2 <- function(n_samples = 1000, mean = 100, sd = 15, n = 30, distribution = "normal", sample_mean = 107, alpha= 0.05){
perc = 1-alpha
library(ggplot2)
library(dplyr)
if (distribution == "normal") {
samples <- replicate(n_samples, mean(rnorm(n = n, mean = mean, sd = sd)))
title_text = "normal distribution"
}
if (distribution == "uniform") {
samples <- replicate(n_samples, mean(runif(n = n, min=0, max=1)))
title_text = "uniform distribution"
}
df <- data.frame(samples = samples)
df %>%
mutate(perc_num = percent_rank(samples),
max_5perc = ifelse(perc_num > perc*n_samples, 1, 0),
greater_than_sample = ifelse(samples > sample_mean, 1, 0)) -> df
p_value <- round(mean(df$greater_than_sample), 3)
p <- ggplot(df) +
aes(x = samples) +
geom_histogram() +
labs(title = paste("Histogram of ", n_samples, " samples", "\n from a ", title_text , sep = ""),
caption = paste("mean-pop=", mean, ", sd-pop=",sd, sep = "", ", mean in sample=", sample_mean),
x = "sample means") +
geom_histogram(data = dplyr::filter(df, perc_num > perc), fill = "red") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = sample_mean, linetype = "dashed", color = "grey40") +
ggplot2::annotate("text", x = Inf, y = Inf, label = paste("p =",p_value), hjust = 1, vjust = 1)
print(p)
return(df)
}
simu_p2(n=1200)
simu_p2(n=1000)
simu_p2()
simu_p(n_stipros = 1000)
simu_p(n_samples = 1000)
source("https://sebastiansauer.github.io/Rcode/clt_1.R")
source("https://sebastiansauer.github.io/Rcode/clt_1.R")
source("https://sebastiansauer.github.io/Rcode/clt_1.R")
stipros(n_stipros = 10000, n = 30, mean = 100, sd = 15)
stipros(n_stipros = 1000, n = 10, distribution = "uniform")
simu_p()
load(url("http://varianceexplained.org/files/trump_tweets_df.rda"))
setwd("~/Documents/Literatur/Methoden_Literatur/Datensaetze")
save("trump_tweets_df", file = "trump_tweets_df.Rda")
# Chunk 1
set.seed(1014)
options(digits = 3)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
comment = "#>",
collapse = TRUE,
cache = TRUE,
out.width = "70%",
fig.align = 'center',
fig.width = 6,
fig.asp = 0.618,  # 1 / phi
fig.show = "hold"
)
# Chunk 2: libs_visualisieren
library(tidyverse)  # Zum Plotten
# library(car)  # Umkodieren
# library(knitr)  # HTML-Tabellen
# Chunk 3: plot-vis
knitr::include_graphics("images/visualisieren/Visualisieren.pdf")
# Chunk 4: fig-anscombe
knitr::include_graphics("images/visualisieren/anscombe.pdf")
# Chunk 5: fig-anatomie
knitr::include_graphics("images/anatomie_diagramm_crop.pdf")
# Chunk 6
data(flights, package = "nycflights13")
# Chunk 8: fig-flights
qplot(x = carrier, y = arr_delay, geom = "boxplot", data = flights)
# Chunk 9
qplot(x = factor(month), y = arr_delay, geom = "boxplot", data = flights)
# Chunk 11
wo_men <- read.csv("data/wo_men.csv")
qplot(x = shoe_size, data = wo_men)
# Chunk 12
# qplot(x = shoe_size, data = wo_men)  wie oben
qplot(x = shoe_size, data = wo_men, geom = "density")
# Chunk 13
ggplot(data = wo_men) +
aes(x = shoe_size) +
geom_histogram(aes(y = ..density..), alpha = .7) +
geom_density(color = "blue")
# Chunk 14
qplot(x = shoe_size, data = wo_men, geom = "density", color = sex)
qplot(x = shoe_size, data = wo_men, geom = "density", fill = sex, alpha = I(.7))
# Chunk 15
wo_men %>%
filter(shoe_size <= 47) -> wo_men2
qplot(x = shoe_size, data = wo_men2, geom = "density", fill = sex, alpha = I(.7))
# Chunk 16
wo_men %>%
filter(shoe_size <= 47) %>%
qplot(x = shoe_size, data = ., geom = "density", fill = sex, alpha = I(.7))
# Chunk 17
qplot(x = height, y = shoe_size, data = wo_men)
# Chunk 18
wo_men %>%
filter(height > 150, height < 210, shoe_size < 55) %>%
qplot(x = height, y = shoe_size, data = .)
# Chunk 19
wo_men %>%
filter(height > 150, height < 210, shoe_size < 55) %>%
qplot(x = height, y = shoe_size, data = .) +
geom_smooth(method = "lm")
nrow(flights)  # groß!
ggplot(flights) +
aes(x = distance, y = air_time) +
geom_hex()
wo_men %>%
filter(height > 150, height < 210, shoe_size < 55) -> wo_men2
wo_men2 %>%
qplot(x = height, y = shoe_size, color = sex, data = .)
wo_men %>%
filter(height > 150, height < 210, shoe_size < 55) %>%
qplot(x = height, y = shoe_size, facets = "~sex", color = sex, data = .)
ggplot(flights) +
aes(x = distance, y = air_time) +
geom_hex()
```{r fig-aes-color}
wo_men %>%
dplyr::filter(height > 150, height < 210, shoe_size < 55) -> wo_men2
wo_men2 %>%
qplot(x = height, y = shoe_size, color = sex, data = .)
ggplot(flights) +
aes(x = distance, y = air_time) +
geom_hex()
wo_men %>%
dplyr::filter(height > 150, height < 210, shoe_size < 55) -> wo_men2
wo_men2 %>%
qplot(x = height, y = shoe_size, color = sex, data = .)
wo_men2 %>%
qplot(x = height, y = shoe_size, color = sex, data = .)
wo_men %>%
dplyr::filter(height > 150, height < 210, shoe_size < 55) %>%
qplot(x = height, y = shoe_size, facets = "~sex", color = sex, data = .)
wo_men %>%
dplyr::filter(height > 150, height < 210, shoe_size < 55) %>%
dplyr::select(-sex) -> wo_men4
# Chunk 1
set.seed(1014)
options(digits = 3)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
comment = "#>",
collapse = TRUE,
cache = TRUE,
out.width = "70%",
fig.align = 'center',
fig.width = 6,
fig.asp = 0.618,  # 1 / phi
fig.show = "hold"
)
# Chunk 2: libs_visualisieren
library(tidyverse)  # Zum Plotten
# library(car)  # Umkodieren
# library(knitr)  # HTML-Tabellen
# Chunk 3: plot-vis
knitr::include_graphics("images/visualisieren/Visualisieren.pdf")
# Chunk 4: fig-anscombe
knitr::include_graphics("images/visualisieren/anscombe.pdf")
# Chunk 5: fig-anatomie
knitr::include_graphics("images/anatomie_diagramm_crop.pdf")
# Chunk 6
data(flights, package = "nycflights13")
# Chunk 8: fig-flights
qplot(x = carrier, y = arr_delay, geom = "boxplot", data = flights)
# Chunk 9
qplot(x = factor(month), y = arr_delay, geom = "boxplot", data = flights)
# Chunk 11
wo_men <- read.csv("data/wo_men.csv")
qplot(x = shoe_size, data = wo_men)
# Chunk 12
# qplot(x = shoe_size, data = wo_men)  wie oben
qplot(x = shoe_size, data = wo_men, geom = "density")
# Chunk 13
ggplot(data = wo_men) +
aes(x = shoe_size) +
geom_histogram(aes(y = ..density..), alpha = .7) +
geom_density(color = "blue")
# Chunk 14
qplot(x = shoe_size, data = wo_men, geom = "density", color = sex)
qplot(x = shoe_size, data = wo_men, geom = "density", fill = sex, alpha = I(.7))
# Chunk 15
wo_men %>%
filter(shoe_size <= 47) -> wo_men2
qplot(x = shoe_size, data = wo_men2, geom = "density", fill = sex, alpha = I(.7))
# Chunk 16
wo_men %>%
filter(shoe_size <= 47) %>%
qplot(x = shoe_size, data = ., geom = "density", fill = sex, alpha = I(.7))
# Chunk 17
qplot(x = height, y = shoe_size, data = wo_men)
# Chunk 18
wo_men %>%
filter(height > 150, height < 210, shoe_size < 55) %>%
qplot(x = height, y = shoe_size, data = .)
# Chunk 19
wo_men %>%
filter(height > 150, height < 210, shoe_size < 55) %>%
qplot(x = height, y = shoe_size, data = .) +
geom_smooth(method = "lm")
# Chunk 21: flights_hexbin
data(flights, package = "nycflights13")
nrow(flights)  # groß!
ggplot(flights) +
aes(x = distance, y = air_time) +
geom_hex()
# Chunk 22: fig-aes-color
wo_men %>%
filter(height > 150, height < 210, shoe_size < 55) -> wo_men2
wo_men2 %>%
qplot(x = height, y = shoe_size, color = sex, data = .)
# Chunk 23
wo_men %>%
filter(height > 150, height < 210, shoe_size < 55) %>%
qplot(x = height, y = shoe_size, facets = "~sex", color = sex, data = .)
